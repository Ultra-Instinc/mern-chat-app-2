import React, { useEffect, useMemo, useRef, useState } from "react";
import ReactDOM from "react-dom";
import { PiQuestionLight } from "react-icons/pi";
import { motion } from "framer-motion";
import { modalAnimations } from "../../animations/framerMotionAnimations";
import { createOperationArea, editSingleOperationArea } from '../../redux/fetchedData/operationAreaSlice'
import { baseUrl } from "../../constants/constData";
import { formatDate } from "../../utils/dateFormatter";
import Input from "../Input";
import { TfiReload } from "react-icons/tfi";
import { useDispatch, useSelector } from "react-redux";
import { createNetwork, editSingleNetwork } from "../../redux/fetchedData/NetworkSlice";
import { createManufacturer, editSingleManufacturer } from "../../redux/fetchedData/manufacturerSlice";
import { createGenerationType, editSingleGenerationType } from "../../redux/fetchedData/generationTypeSlice";
import { createAdditiveType, editSingleAdditiveType } from "../../redux/fetchedData/additiveTypeSlice";
import { createModel, editSingleModel } from "../../redux/fetchedData/modelSlice";
import { createPhase, editSinglePhase } from "../../redux/fetchedData/phaseSlice";
import { createBusBar, editSingleBusBar } from "../../redux/fetchedData/busBarSlice";
import { createCCBlocks, editSingleCCBlocks } from "../../redux/fetchedData/ccBlocksSlice";
import { editCheckFetchedData } from "../../redux/fetchedData/fetchedDataSlice";
import { editCheckGenerationUnit } from "../../redux/fetchedData/generationUnitDataSlice";
import { editCheckCoolingSystem } from "../../redux/fetchedData/coolingSystemSlice";
import { editCheckFuelTank } from "../../redux/fetchedData/fuelTankDataSlice";
import { PrimeDropdown } from "./PrimeDropdown";
import { PrimeMultiSelect } from "./PrimeMultiSelect";
import { createUsers, editCheckUsers, editSingleUsers } from "../../redux/fetchedData/usersSlice";
import { createController, editSingleController } from "../../redux/fetchedData/controller";
import { createOrganization, editCheckOrganization, editSingleOrganization } from "../../redux/fetchedData/organization";
import { useLocation, useNavigate, useNavigationType, useParams } from "react-router-dom";
import { createPlantAdditiveTypes, editCheckPlantAdditiveTypes, editSinglePlantAdditiveTypes } from "../../redux/fetchedData/plantAdditiveTypes";
import { IoClose } from "react-icons/io5";
import { createPlantFuel, editCheckPlantFuel, editSinglePlantFuel } from "../../redux/fetchedData/plantFuelSlice";
import { createUnitDegradingData, editUnitDegrade } from "../../redux/dataEntry/unitDegradeSlice";
import { editSingleUnitStatus } from "../../redux/dataEntry/unitStatusSlice";
import { capitalizeSentence } from "../../utils/stringManipulations";
import SharedLoadingBtn from "./SharedLoadingBtn";
import fetchObject from "../../constants/fetchObject";
import { userNameAppFunction } from "../../utils/userNameAbb";
import { handleAbFormDateTime } from "../../utils/timeHelpers";
import { useSocketContext } from "../../context/socketContext";
import { createUnitDeratesData, deleteDerate, editUnitDerate } from "../../redux/dataEntry/unitDeratesSlice";
import { createUnitNonCurtailingData, editUnitNonCurtail } from "../../redux/dataEntry/unitNonCurtailingSlice";
const SharedModal = ({
	operation,
	modalData,
	setShowSharedModal,
	setFormData,
	formDataBackUp,
	setRecordData,
	recordDataBackUp,
	reference,
	showToast,
	recordData,
	formData,
	auxValue,
	setLastHour,
	lastHour,
	recordTimeStamp,
	area_code,
	condition,
	page,
	path,
	stringValue,
	mark,
	bigRes,
	setQuillText,
	setTablePageNumber
}) => {
	const user = useSelector(state => state?.user)
	const userSecId = user ? user?.credentails?.user_sec_id : null
	const userSecName = user ? user?.credentails?.user_sec_name : null
	let starterInputData = null
	let starterInputData2 = null
	let starterInputData3 = null
	let starterInputData4 = null
	let starterInputData5 = null
	let starterInputData6 = null
	const { setUserData } = useSocketContext()
	const [loading, setLoading] = useState(false)

	const dispatch = useDispatch()
	const navigate = useNavigate()
	const params = useParams()
	const location = useLocation()
	const searchParams = new URLSearchParams(location.search);
	const valueRef = useRef(null)
	const value2Ref = useRef(null)
	const value3Ref = useRef(null)
	const value4Ref = useRef(null)
	const value5Ref = useRef(null)
	const value6Ref = useRef(null)
	if (operation === 'editNetwork') {
		starterInputData = modalData.network_name
		starterInputData2 = modalData.network_code
	}
	if (operation === 'editOperationArea') {
		starterInputData = modalData.area_name
	}
	if (operation === 'editManufacturer') {
		starterInputData = modalData.manufacturer_name
	}
	if (operation === 'editFuelType') {
		starterInputData = modalData.fuel_type
	}
	if (operation === 'editStatus') {
		starterInputData = auxValue === "status" ? modalData.status_abb : modalData.sub_status_abb
		starterInputData2 = auxValue === "status" ? modalData.status_name : modalData.sub_status_name
	}
	if (operation === 'editGenerationType') {
		starterInputData = modalData.gen_type
	}
	if (operation === 'editAdditiveType') {
		starterInputData = modalData.additive_name
	}
	if (operation === 'editModel') {
		starterInputData = modalData.model_name
	}
	if (operation === 'editPhase') {
		starterInputData = modalData.phase_name
	}
	if (operation === 'editBusBar') {
		starterInputData = modalData?.bus_volt?.split(' ')[0]
	}
	if (operation === 'editCCBlock') {
		starterInputData = modalData.block_name
	}
	if (operation === 'editOrganization') {
		starterInputData = modalData?.org_name
		starterInputData2 = modalData?.energy_source
	}
	if (operation === 'editPlantAdditive') {
		starterInputData2 = modalData?.priority
	}
	if (operation === 'editPlantFuel') {
		starterInputData = modalData?.transport_method
		starterInputData2 = modalData?.coverage_days
	}
	if (operation === 'editController') {
		starterInputData = modalData.controller_name
	}
	let userExpansionArrKeys = []
	if (operation === 'expandUser' && auxValue) {
		if (Array.isArray(formData) === false && formData?.plant_weather === undefined) {
			userExpansionArrKeys = Object.keys(formData)
		} else if (Array.isArray(formData) === true) {
			userExpansionArrKeys = Object.keys(formData[0])
		}
	}
	if (operation === 'editLoadCapacity') {
		starterInputData = modalData.org_load
		starterInputData2 = modalData.org_cap
	}
	if (operation === 'editEnergyEntry' && auxValue === "imported") {
		starterInputData = modalData.imported_energy
		starterInputData2 = modalData.data_period
	}
	if (operation === 'editEnergyEntry' && auxValue === "rented") {
		starterInputData = modalData.rented_energy
		starterInputData2 = modalData.data_period
		starterInputData3 = modalData.nameplate_cap
		starterInputData4 = modalData.fuel_code
		starterInputData5 = modalData.fuel_consumption
		starterInputData6 = modalData.unit_count
	}
	const [userUpdateId, setUserUpdateId] = useState(null)
	const [value, setValue] = useState(modalData ? starterInputData : "")
	const [value2, setValue2] = useState(modalData ? starterInputData2 : "")
	const [value3, setValue3] = useState(modalData ? starterInputData3 : "")
	const [value4, setValue4] = useState(modalData ? starterInputData4 : "")
	const [value5, setValue5] = useState(modalData ? starterInputData5 : "")
	const [value6, setValue6] = useState(modalData ? starterInputData6 : "")
	const handleSaveOnly = async (e) => {
		e.preventDefault();
		if (operation === "handleISRSInjectUnitStatus") {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status-inject?action=`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "handleISRSUnitStatus") {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status?action=`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "submitEditISRSUnitStatus") {
			const { exp_finish_date, status_timestamp, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, componentPresent, reason_code, id } = modalData
			let reqBody
			if (status_code === 9) {
				reqBody = {
					status_code,
					sub_status_code,
					exp_finish_date: (status_code === 3 || status_code === 10 || status_code === 12 || status_code === 14) ? null : new Date(exp_finish_date).toLocaleDateString('en-GB'),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sap_workorder: sap,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code,
					sub_status_code,
					exp_finish_date: (status_code === 3 || status_code === 10 || status_code === 12 || status_code === 14) ? null : new Date(exp_finish_date).toLocaleDateString('en-GB'),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code,
					sap_workorder: sap,
					other_reason,
					action_taken: action_taken || null,
					reason_code: reason_code?.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status/${id}?unit_code=${auxValue?.unit_code}&status_id=${id}&status_timestamp=&operation_type=edit&action=`, fetchObject("PUT", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleUnitStatus(data?.data));
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Unit Status Updated Successfully!!",
				});
				setTimeout(() => {
					if (status_code === 3) {
						navigate(`/data_entry/unit_hourly_data?a=${parseInt(auxValue?.areaQuery)}&p=${parseInt(auxValue?.plantQuery)}&t=${new Date(status_timestamp).toISOString()}`)
					} else navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
	}
	const handleClick = async (e) => {
		e.preventDefault()
		if (operation === "alertReload") {
			localStorage.removeItem('persist:root')
			window.location.reload()
		}
		if (operation === 'submitBulkInsert') {
			let body = []
			modalData?.forEach(item => {
				body.push({ unit_code: item?.unit_id, status_timestamp: handleAbFormDateTime(auxValue), status_code: lastHour, startup: item?.startup })
			})
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status-bulk`, fetchObject("POST", body))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit bulk inserted successfully !" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to insert Unit Bulk" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
			}
		}
		if (operation === 'deleteUnitStatus') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status/${modalData?.status_id}`, fetchObject("DELETE"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Deleted Successfully!!" });
				setLastHour(p => !p)
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to delete unit status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'deleteUnitDerate') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-derates/${modalData?.derate_id}`, fetchObject("DELETE"))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(deleteDerate(modalData?.derate_id))
				showToast({ severity: "success", summary: "Success", detail: "Unit Derate Deleted Successfully!!" });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to delete unit derate" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'changePowerPlantsOrder') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plants-order`, fetchObject("PUT", modalData));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to change plants order" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'changeGenerationUnitsOrder') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/units-order`, fetchObject("PUT", modalData));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to change units order" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'handleISRSInjectUnitStatus') {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status-inject?action=restore`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'handleISRSUnitStatus') {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status?action=restore`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitInjectUnitStatus') {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status-inject?action=`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitCreateUnitStatus') {
			let unit_code = Number(searchParams.get("unit_code"));
			const { status_timestamp, exp_finish_date, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, startup, componentPresent, reason_code } = modalData
			let reqBody
			if (status_code === 3 || status_code === 12) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 10 || status_code === 14) {
				reqBody = {
					status_code: status_code,
					unit_code: unit_code,
					startup,
					sap_workorder: sap,
					action_taken: action_taken || null,
					sub_status_code,
					status_timestamp: handleAbFormDateTime(status_timestamp)
				}
			} else if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					startup: startup || null,
					sap_workorder: sap,
					unit_code: unit_code,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code,
					sap_workorder: sap,
					exp_finish_date: formatDate(new Date(exp_finish_date).toLocaleDateString("en-US", {
						day: "2-digit", month: "2-digit",
						year: "numeric",
					})),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code: componentPresent ? component_code : null,
					other_reason,
					action_taken,
					startup,
					sap,
					unit_code: unit_code,
					reason_code: reason_code.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status`, fetchObject("POST", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				const handledData = data?.data;
				dispatch(editSingleUnitStatus(handledData));
				showToast({ severity: "success", summary: "Success", detail: "Unit Status Created Successfully!!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitEditUnitStatus') {
			const { exp_finish_date, status_timestamp, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, componentPresent, reason_code, id } = modalData
			let reqBody
			if (status_code === 9) {
				reqBody = {
					status_code: status_code,
					sub_status_code: sub_status_code,
					exp_finish_date: (status_code === 3 || status_code === 10 || status_code === 12 || status_code === 14) ? null : new Date(exp_finish_date).toLocaleDateString('en-GB'),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code: system_code || null,
					sap_workorder: sap,
					sub_system_code: sub_system_code || null,
					component_code: componentPresent ? component_code : null,
					other_reason: other_reason || null,
					action_taken: action_taken || null,
					reason_code: reason_code?.toString() || null,
				}
			} else {
				reqBody = {
					status_code: status_code,
					sub_status_code: sub_status_code,
					exp_finish_date: (status_code === 3 || status_code === 10 || status_code === 12 || status_code === 14) ? null : handleAbFormDateTime(exp_finish_date),
					status_timestamp: handleAbFormDateTime(status_timestamp),
					system_code,
					sub_system_code,
					component_code,
					sap_workorder: sap,
					other_reason,
					action_taken: action_taken || null,
					reason_code: reason_code?.toString(),
				}
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status/${id}?unit_code=${auxValue.unit_code}&status_id=${id}&status_timestamp=&operation_type=edit&action=`, fetchObject("PUT", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleUnitStatus(data?.data));
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Unit Status Updated Successfully!!",
				});
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitEditISRSUnitStatus') {
			const { exp_finish_date, status_timestamp, system_code, sub_system_code, component_code, other_reason, sap, status_code, sub_status_code, action_taken, reason_code, id } = modalData
			let reqBody = {
				status_code: status_code,
				sub_status_code: sub_status_code,
				exp_finish_date: (status_code === 3 || status_code === 10 || status_code === 12 || status_code === 14) ? null : handleAbFormDateTime(exp_finish_date),
				status_timestamp: handleAbFormDateTime(status_timestamp),
				system_code,
				sub_system_code,
				component_code,
				sap_workorder: sap,
				other_reason,
				action_taken: action_taken || null,
				reason_code: reason_code?.toString(),
			}

			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-status/${id}?unit_code=${auxValue.unit_code}&status_id=${id}&status_timestamp=&operation_type=edit&action=restore`, fetchObject("PUT", reqBody));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleUnitStatus(data?.data));
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Unit Status Updated Successfully!!",
				});
				setTimeout(() => {
					if (status_code === 3) {
						navigate(`/data_entry/unit_hourly_data?a=${parseInt(auxValue?.areaQuery)}&p=${parseInt(auxValue?.plantQuery)}&t=${new Date(status_timestamp).toISOString()}`)
					} else navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Unit Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'editLoadCapacity') {
			if (!value) {
				showToast({
					severity: "info",
					summary: "Info",
					detail: "Enter Orgnization Load",
				});
				return
			}
			if (!value2) {
				showToast({
					severity: "info",
					summary: "Info",
					detail: "Enter Orgnization Capacity",
				});
				return
			}
			setLoading(true)
			try {
				let str = ''
				if (auxValue === "imported") {
					str = `${baseUrl}/api/v0/org-imported-load/${modalData?.record_id}`
				}
				if (auxValue === "rented") {
					str = `${baseUrl}/api/v0/org-rented-load/${modalData?.record_id}`
				}
				const res = await fetch(str, fetchObject("PUT", {
					org_code: modalData?.org_code,
					record_timestamp: modalData?.record_timestamp,
					org_load: value,
					org_cap: value2
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: `${auxValue === "imported" ? "Imported" : "Rented"} Load/Capacity Updated Successfully!!`,
				});
				if (lastHour === 1) {
					setLastHour("1")
				} else { setLastHour(1) }
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Load/Capacity" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
			}
		}
		if (operation === 'editEnergyEntry') {
			if (auxValue === "rented") {
				if (!value2) {
					showToast({ severity: "info", summary: "Info", detail: "Select Period !" })
					value2Ref?.current?.focus()
					return
				}
				if (!value) {
					showToast({ severity: "info", summary: "Info", detail: "Enter Rented Energy !" })
					valueRef?.current?.focus()
					return
				}
				if (!value3) {
					showToast({ severity: "info", summary: "Info", detail: "Enter Nameplate Capacity !" })
					value3Ref?.current?.focus()
					return
				}
				if (!value4) {
					showToast({ severity: "info", summary: "Info", detail: "Select Fuel Type !" })
					value4Ref?.current?.focus()
					return
				}
				if (!value5) {
					showToast({ severity: "info", summary: "Info", detail: "Enter Fuel Consumption !" })
					value5Ref?.current?.focus()
					return
				}
				if (!value6) {
					showToast({ severity: "info", summary: "Info", detail: "Enter Unit Count !" })
					value6Ref?.current?.focus()
					return
				}
			}
			try {

				let str = ''
				let body = null
				if (auxValue === "imported") {
					str = `${baseUrl}/api/v0/org-imported-energy/${modalData?.record_id}`
					body = {
						imported_energy: value,
						data_period: value2
					}
				}
				if (auxValue === "rented") {
					str = `${baseUrl}/api/v0/org-rented-energy/${modalData?.record_id}`
					body = {
						rented_energy: value,
						data_period: value2,
						fuel_consumption: value5,
						unit_count: value6,
						nameplate_cap: value3,
						fuel_code: value4
					}
				}
				setLoading(true)
				const res = await fetch(str, fetchObject("PUT", body))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: `${auxValue === "imported" ? "Imported" : "Rented"} Energy Updated Successfully!!`,
				});
				if (auxValue === "imported") {
					setRecordData(recordData?.map(item => {
						if (item.record_id === modalData?.record_id) {
							return {
								...item,
								imported_energy: value,
								data_period: value2
							}
						} else {
							return item
						}
					}))
				}
				if (auxValue === "rented") {
					setRecordData(recordData?.map(item => {
						if (item.record_id === modalData?.record_id) {
							return {
								...item,
								rented_energy: value,
								data_period: value2,
								nameplate_cap: value3,
								fuel_code: value4,
								fuel_consumption: value5,
								unit_count: value6,
							}
						} else {
							return item
						}
					}))
				}
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Energy" : error.message })
				return;
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitImportantEventEdit') {
			let { record_id, event_title, event_quill, event_label } = modalData
			let handledQuill = ''
			let span = document.createElement("span")
			span.innerHTML = event_quill
			handledQuill = span.textContent || span.innerText
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/important-events/${record_id}`, fetchObject("PUT", {
					event_title, event_quill, record_timestamp: formatDate(new Date().toLocaleDateString('en-US', {
						day: '2-digit',
						month: '2-digit',
						year: 'numeric',
						hour: '2-digit',
						minute: '2-digit',
						hour12: false
					})?.replace(",", "")), event_label, event_body: handledQuill,
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Important Event Updated Successfully!!",
				});
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Important Event" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitImportantEventCreate') {
			let { plant_code, event_title, event_quill, event_label } = modalData
			let handledQuill = ''
			let span = document.createElement("span")
			span.innerHTML = event_quill
			handledQuill = span.textContent || span.innerText
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/important-events`, fetchObject("POST", {
					plant_code, event_title, event_quill, record_timestamp: formatDate(new Date().toLocaleDateString('en-US', {
						day: '2-digit',
						month: '2-digit',
						year: 'numeric',
						hour: '2-digit',
						minute: '2-digit',
						hour12: false
					})?.replace(",", "")), event_label, event_body: handledQuill,
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Important Event Created Successfully!!",
				});
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Important Event" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitComment') {
			let { title, quillText, record_timestamp, labelsDropdownData, priority, category } = modalData
			let labels = []
			labelsDropdownData?.forEach(item => {
				if (item?.isChecked) {
					labels.push(item.label)
				}
			})
			let finalLabels = labels?.join(",")
			let handledQuill = ''
			let span = document.createElement("span")
			span.innerHTML = quillText
			handledQuill = span.textContent || span.innerText
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/user-comments`, fetchObject("POST", { user_code: auxValue, comment_title: title, comment_quill: quillText, comment_body: handledQuill, record_timestamp, label: finalLabels, severity: priority, category }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Comment Submitted Successfully!!",
				});
				setLoading(false)
				setShowSharedModal(false);
				setQuillText(null)
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Comment" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'editComment') {
			let { title, quillText, record_timestamp, labelsDropdownData, priority, category, comment_id } = modalData
			let labels = []
			labelsDropdownData?.forEach(item => {
				if (item?.isChecked) {
					labels.push(item.label)
				}
			})
			let finalLabels = labels?.join(",")
			let handledQuill = ''
			let span = document.createElement("span")
			span.innerHTML = quillText
			handledQuill = span.textContent || span.innerText
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/user-comments/${comment_id}`, fetchObject("PUT", { comment_title: title, comment_quill: quillText, comment_body: handledQuill, record_timestamp, label: finalLabels, severity: priority, category }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Comment Updated Successfully!!",
				});
				setLoading(false)
				setShowSharedModal(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Comment" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'replyComment') {
			let { user_code, comment_code, reply_quill } = modalData
			let handledQuill = ''
			let span = document.createElement("span")
			span.innerHTML = reply_quill
			handledQuill = span.textContent || span.innerText
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/user-replys`, fetchObject("POST", {
					user_code,
					comment_code,
					record_timestamp: formatDate(new Date().toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", hour12: false })),
					reply_quill,
					reply_body: handledQuill,
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Reply Submitted Successfully !" })
				setFormData([...formData, {
					user_code, comment_code, reply_quill, reply_body: handledQuill, user_sec_id: userSecId,
					user_sec_name: userSecName,
					name_abb: userNameAppFunction(userSecName),
					record_timestamp: new Date()
				}])
				setQuillText(null)
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit reply" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmEditPerformanceTest') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/tests/${area_code}`, fetchObject("PUT", {
					...modalData,
					test_date: formatDate(
						new Date(modalData.test_date).toLocaleDateString("en-US", {
							day: "2-digit",
							month: "2-digit",
							year: "numeric",
						})
					),
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Performance Test Updated Successfully!!",
				});
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Performance Test" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmCreatePerformanceTest') {
			let unit_code = searchParams.get("unit_code");
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/tests?unit_code=${unit_code}`, fetchObject("POST", {
					...modalData,
					unit_code: unit_code,
					test_date: formatDate(
						new Date(modalData.test_date).toLocaleDateString("en-US", {
							day: "2-digit",
							month: "2-digit",
							year: "numeric",
						})
					),
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Performance Test Created Successfully!!",
				});
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Performance Test" : error.message })
				return;
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmCreateNonCurt') {
			let unit_id = searchParams.get("unit_id");
			let { reason, description, startDate, finishDate, system, subSystem, component, action } = modalData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-non-curts?unit_code=${unit_id}`, fetchObject("POST", {
					non_curt_desc: description,
					non_curt_start_date: handleAbFormDateTime(startDate),
					non_curt_end_date: handleAbFormDateTime(finishDate),
					system_code: system,
					sub_system_code: subSystem,
					// derate_size: size,
					component_code: component,
					reason_code: reason,
					action_code: action,
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Non-Curtailing Data Created Successfully!!",
				});
				dispatch(createUnitNonCurtailingData(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Non Curtailing Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmEditNonCurt') {
			let { id, reason, description, startDate, finishDate, system, subSystem, component, action } = modalData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-non-curts/${id}`, fetchObject("PUT", {
					non_curt_desc: description,
					system_code: system,
					// derate_size: size,
					sub_system_code: subSystem,
					component_code: component,
					reason_code: reason,
					action_code: action,
					non_curt_start_date: handleAbFormDateTime(startDate),
					non_curt_end_date: handleAbFormDateTime(finishDate),
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "non-Curtailing Data Updated Successfully!!",
				});
				dispatch(editUnitNonCurtail(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Non Curtailing Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmCreateDerate') {
			let { size, reason, startDate, type, finishDate } = modalData
			let unit_id = searchParams.get("unit_id")
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-derates`, fetchObject("POST", {
					derate_size: size,
					derate_reason: reason,
					derate_start_date: handleAbFormDateTime(startDate),
					derate_end_date: finishDate ? handleAbFormDateTime(finishDate) : null,
					derate_code: type,
					unit_code: unit_id
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Derate Data Created Successfully!!",
				});
				dispatch(createUnitDeratesData(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Derate Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmEditDerate') {
			let { size, reason, startDate, type, finishDate } = modalData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-derates/${area_code}`, fetchObject("PUT", {
					derate_size: size,
					derate_reason: reason,
					derate_start_date: handleAbFormDateTime(startDate),
					derate_end_date: handleAbFormDateTime(finishDate),
					derate_code: type,
					derate_abb: auxValue
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Derate Data Updated Successfully!!",
				});
				dispatch(editUnitDerate(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Derate Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmCreateDegrade') {
			let { startTime, finishTime, degDueToFuel, degDueToOther, remarks } = modalData
			let unit_code = searchParams.get("unit_code")
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/V0/unit-degrades?unit_id=${unit_code}`, fetchObject("POST", {
					degrade_start_date: handleAbFormDateTime(startTime),
					degrade_end_date: finishTime ? handleAbFormDateTime(finishTime) : null,
					fuel_degrade: degDueToFuel,
					other_degrade: degDueToOther,
					degrade_reason: remarks,
				}));
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Degrade Data Created Successfully!!",
				});
				dispatch(createUnitDegradingData(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Degrade Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'confirmEditDegrade') {
			let { startTime, finishTime, degDueToFuel, degDueToOther, remarks } = modalData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/V0/unit-degrades/${area_code}`, fetchObject("PUT", {
					degrade_start_date: handleAbFormDateTime(startTime),
					degrade_end_date: handleAbFormDateTime(finishTime),
					fuel_degrade: degDueToFuel,
					other_degrade: degDueToOther,
					degrade_reason: remarks,
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editUnitDegrade(data.data));
				showToast({
					severity: "success",
					summary: "Success",
					detail: "Degrade Data Updated Successfully!!",
				});
				dispatch(editUnitDegrade(data?.data))
				setLastHour(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Degrade Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if ((operation === "cancelCreateDegrade" || operation === "cancelEditDegrade" || operation === "cancelCreateDerate" || operation === "cancelEditDerate" || operation === "cancelCreateNonCurt" || operation === "cancelEditNonCurt")) {
			setShowSharedModal(false)
			setLastHour(false)
			return
		}
		if (operation === "resetUnitDailyFuel") {
			setFormData(formDataBackUp)
			showToast({ severity: "success", summary: "Success", detail: "Unit Fuel Consumption Sucessfully Reset !" })
			setShowSharedModal(false)
		}
		if (operation === "changePlantFuelStatus") {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-fuel-types/update-fuel-status/${modalData?.record_id}`, fetchObject("PUT"))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckPlantFuel({ record_id: modalData?.record_id }))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Fuel Status Changed Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to change Plant Fuel Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "submitEditGenerationUnit") {
			setLoading(true)
			try {
				let id = params.id
				let { unit_code, unit_id, plant_code, unit_name, unit_status, record_id, cooling_system_code, ...rest } = formData
				let res = await fetch(`${baseUrl}/api/v0/units/${id}`, fetchObject("PUT", {
					...rest,
					combined_date: formatDate(new Date(rest.combined_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					commission_date: formatDate(new Date(rest.commission_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					pac_date: formatDate(new Date(rest.pac_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					retire_date: formatDate(new Date(rest.retire_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					blackstart_date: rest.blackstart_unit ? formatDate(new Date(rest.blackstart_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })) : null,
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: "Generation Unit Edited Successfully !" })
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Generation Unit" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "submitCreateGenerationUnit") {
			try {
				let plant_code = searchParams.get("plant_code")
				const { unit_id, cooling_system_code, record_id, ...rest } = formData
				let unitNamePrefix = ""
				if (rest.generation_type === "Steam") {
					unitNamePrefix = "ST"
				} else if (rest.generation_type === "Gas") {
					unitNamePrefix = "GT"
				} else if (rest.generation_type === "Diesel") {
					unitNamePrefix = "DE"
				} else if (rest.generation_type === "Solar") {
					unitNamePrefix = "SO"
				}
				setLoading(true)
				let res = await fetch(`${baseUrl}/api/v0/units`, fetchObject("POST", {
					...rest,
					plant_code: plant_code,
					unit_status: rest.unit_commissioning === false ? true : false,
					unit_code: rest.unit_sn,
					unit_name: `${unitNamePrefix}${rest.unit_sn}`,
					combined_date: rest?.unit_combined ? formatDate(new Date(rest.combined_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })) : null,
					commission_date: rest.unit_commissioning ? null : formatDate(new Date(rest.commission_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					pac_date: rest.unit_commissioning ? null : formatDate(new Date(rest.pac_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					retire_date: rest.unit_commissioning ? null : formatDate(new Date(rest.retire_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })),
					blackstart_date: rest.blackstart_date ? formatDate(new Date(rest.blackstart_date).toLocaleDateString("en-US", { year: "numeric", month: "2-digit", day: "2-digit" })) : null,
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: "Generation Unit Created Successfully! " })
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Generation Unit" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "editPlantFuel") {
			if (!powerPlant) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Child Fuel !" })
				return
			}
			if (!value) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Transport Method !" })
				return
			}
			if (!value2 && operationArea !== 4 && modalData?.fuel_type !== "Gas" && value !== "Pipeline") {
				showToast({ severity: "info", summary: "Info", detail: "Please Enter Coverage Days !" })
				value2Ref?.current?.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-fuel-types/${modalData?.record_id}`, fetchObject("PUT", { child_fuel_code: powerPlant, transport_method: value, coverage_days: value === "Pipeline" ? null : value2 }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSinglePlantFuel(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Fuel Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Plant Fuel" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "createPlantFuel") {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-fuel-types`, fetchObject("POST", { plant_code: area_code, parent_fuel_code: operationArea, child_fuel_code: powerPlant, transport_method: value, coverage_days: value2 }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createPlantFuel(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Fuel Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Plant Fuel" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "changePlantAdditiveStatus") {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-additive-types/update-additive-status/${modalData?.record_id}`, fetchObject("PUT", { priority: value2 }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckPlantAdditiveTypes({ record_id: modalData?.record_id }))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Additive Type Status Changed Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to change Additive Type Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "editPlantAdditive") {
			if (!value2 || Number(value2) > 255 || Number(value2) === 0) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Priority Field... It should be a number between 1 & 255 !" })
				value2Ref.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-additive-types/${modalData?.record_id}`, fetchObject("PUT", { priority: value2 }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSinglePlantAdditiveTypes({ record_id: modalData?.record_id, priority: value2 }))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Additive Type Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Plant Additive Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "createPlantAdditive") {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to select Plant Additive Type!" })
				valueRef.current.focus()
				return
			}
			if (!value2) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Priority Field !" })
				value2Ref.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plant-additive-types`, fetchObject("POST", { additive_code: value, plant_code: area_code, priority: value2 }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createPlantAdditiveTypes(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Plant Additive Type Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Plant Additive Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'submitCreatePowerPlant') {
			let area_code = searchParams.get("area_code");
			let plant_info = {
				altitude: Number(formData.altitude),
				latitude: Number(formData.latitude),
				longitude: Number(formData.longitude),
				phase: Number(formData.phase),
				priority: Number(formData.priority),
				sap_plant_code: Number(formData.sap_plant_code),
				city: formData.city,
				generation_type: formData.generation_type,
				half_hour: formData.half_hour,
				network_code: formData.network_code,
				plant_name: formData.plant_name,
				province: formData.province,
				region: formData.region,
				remarks: formData.remarks,
				retire_date: formatDate(
					new Date(formData.retire_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				sap_plant_key: formData.sap_plant_key,
				sap_plant_name: formData.sap_plant_name,
				unit_group: formData.unit_group,
				wera_name: formData.wera_name,
				area_code: Number(area_code),
			};
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plants`, fetchObject("POST", plant_info));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Power Plant Created Successfully!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Power Plant" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitEditPowerPlant') {
			let id = params.id
			let area_code = searchParams.get("area_code");
			let plant_info = {
				altitude: Number(formData.altitude),
				latitude: Number(formData.latitude),
				longitude: Number(formData.longitude),
				phase: Number(formData.phase),
				priority: Number(formData.priority),
				sap_plant_code: Number(formData.sap_plant_code),
				city: formData.city,
				generation_type: formData.generation_type,
				half_hour: formData.half_hour,
				network_code: formData.network_code,
				plant_name: formData.plant_name,
				province: formData.province,
				region: formData.region,
				remarks: formData.remarks,
				retire_date: formatDate(
					new Date(formData.retire_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				sap_plant_key: formData.sap_plant_key,
				sap_plant_name: formData.sap_plant_name,
				unit_group: formData.unit_group,
				wera_name: formData.wera_name,
				area_code: Number(area_code),
			};
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/plants/${id}`, fetchObject("PUT", plant_info));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Power Plant Data Updated Successfully!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Power Plant" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitEditFuelTank') {
			let id = params.id
			const req_data = {
				comission_date: formatDate(
					new Date(formData.comission_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				maintained_from_date: formatDate(
					new Date(formData.maintained_from_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				maintained_to_date: formatDate(
					new Date(formData.maintained_to_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				next_maintenance_date: formatDate(
					new Date(formData.next_maintenance_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				last_maintenance_date: formatDate(
					new Date(formData.last_maintenance_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				retire_date: formatDate(
					new Date(formData.retire_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				dead_stock: Number(formData.dead_stock),
				filling_point_type: formData.filling_point_type,
				fuel_code: formData.fuel_code,
				operational_cap: Number(formData.operational_cap),
				pumping_point_type: formData.pumping_point_type,
				remarks: formData.remarks,
				roof_type: formData.roof_type,
				tank_diameter: Number(formData.tank_diameter),
				tank_height: Number(formData.tank_height),
				tank_number: formData.tank_number,
				tank_uploaded: formData.tank_uploaded,
				total_cap: Number(formData.total_cap),
			};
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/tanks/${id}`, fetchObject("PUT", req_data));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Fuel Tank Edited Successfully !" })
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Fuel Tank" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitCreateFuelTank') {
			let plant_code = searchParams.get("plant_code");
			const req_data = {
				comission_date: formatDate(
					new Date(formData.comission_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				maintained_from_date: formatDate(
					new Date(formData.maintained_from_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				maintained_to_date: formatDate(
					new Date(formData.maintained_to_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				next_maintenance_date: formatDate(
					new Date(formData.next_maintenance_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				last_maintenance_date: formatDate(
					new Date(formData.last_maintenance_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				retire_date: formatDate(
					new Date(formData.retire_date).toLocaleDateString("en-US", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
					})
				),
				dead_stock: Number(formData.dead_stock),
				filling_point_type: formData.filling_point_type,
				fuel_code: formData.fuel_code,
				operational_cap: Number(formData.operational_cap),
				pumping_point_type: formData.pumping_point_type,
				remarks: formData.remarks,
				roof_type: formData.roof_type,
				tank_diameter: Number(formData.tank_diameter),
				tank_height: Number(formData.tank_height),
				tank_number: formData.tank_number,
				tank_uploaded: formData.tank_uploaded,
				total_cap: Number(formData.total_cap),
			};
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/tanks?plant_code=${plant_code}`, fetchObject("POST", req_data));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Fuel Tank Created Successfully !" })
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Fuel Tank" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === 'submitEditCoolingSystem') {
			let id = params.id
			const { cooling_system_id, plant_code, cooled_unit_count, cooling_system_code, cooled_unit_list, cooling_system_status, buildup_time, burning_time, ...rest } = formData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/cooling-systems/${id}`, fetchObject("PUT", {
					...rest,
					thermal_storage_capacity: rest.thermal_storage_capacity === "" ? null : rest.thermal_storage_capacity,
					thermal_storage_count: rest.thermal_storage_count === "" ? null : rest.thermal_storage_count,
					thermal_storage_diameter: rest.thermal_storage_diameter === "" ? null : rest.thermal_storage_diameter,
					thermal_storage_height: rest.thermal_storage_height === "" ? null : rest.thermal_storage_height,
					buildup_time: buildup_time ? buildup_time : null,
					burning_time: burning_time ? burning_time : null,
				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Cooling System Data Updated Successfully!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Cooling System" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "submitCreateCoolingSystem") {
			let { cooling_system_id, area_code, plant_code, cooled_unit_count, cooling_system_model, cooling_system_status, cooled_unit_list, burning_time, buildup_time, ...rest } = formData
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/cooling-systems?plant_code=${auxValue}`, fetchObject("POST", {
					...rest,
					buildup_time: buildup_time ? buildup_time : null,
					burning_time: burning_time ? burning_time : null,

				}));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Info", detail: "Cooling System created Successfully!" });
				setTimeout(() => {
					navigate(-1)
				}, 1000);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Cooling System" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "cancelCreateCoolingSystem" || operation === "cancelEditCoolingSystem" || operation === "cancelCreateFuelTank" || operation === "cancelEditFuelTank" || operation === 'cancelCreatePowerPlant' || operation === 'cancelEditPowerPlant' || operation === 'cancelEditGenerationUnit' || operation === 'cancelCreateGenerationUnit' || operation === "cancelCreatePerformanceTest" || operation === "cancelEditPerformanceTest" || operation === "cancelCreateUnitStatus" || operation === "cancelEditUnitStatus") {
			navigate(-1)
		}
		if (operation === "editOrganization") {
			if (!value) {
				showToast({ severity: "info", summary: "Info", detail: "Please enter Organization name !" })
				valueRef?.current?.focus()
				return
			}
			if (!value2) {
				showToast({ severity: "info", summary: "Info", detail: "Please enter Energy Source !" })
				value2Ref?.current?.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/organizations/${modalData?.org_id}`, fetchObject("PUT", {
					org_name: value,
					energy_source: value2,
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleOrganization(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Organization has been Edited Successfully !" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Organization" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "createOrganization") {
			if (!value) {
				showToast({ severity: "info", summary: "Info", detail: "Please enter Organization name !" })
				valueRef?.current?.focus()
				return
			}
			if (!value2) {
				showToast({ severity: "info", summary: "Info", detail: "Please enter Energy Source !" })
				value2Ref?.current?.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/organizations`, fetchObject("POST", {
					org_name: value,
					network_code: area_code,
					energy_source: value2,
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createOrganization(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Organization has been Created Successfully !" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Organization" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editController') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/controllers/${modalData?.controller_id}`, fetchObject("PUT", { controller_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleController(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Controller has been Edited Successfully !" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Controller" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createController') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/controllers`, fetchObject("POST", { controller_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createController(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Controller has been Created Successfully !" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Controller" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editUserStatus') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/users/update-user-status/${modalData?.user_id}`, fetchObject("PUT"))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckUsers(modalData))
				showToast({ severity: 'success', summary: "Success", detail: "User Status Updated Successfully" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit User Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editUser') {
			if (!userType) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select User Type !" })
				return
			}
			if ((!userRoles || userRoles?.length < 1) && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select At least 1 User Role !" })
				return
			}
			if (!userRoles2 && userType === "admin") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select User Role !" })
				return
			}
			if (!operationArea && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Operation Area !" })
				return
			}
			if (!operationArea && userType === "admin" && userRoles2 !== 1 && userRoles2 !== 2 && userRoles2 !== 9) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Operation Area !" })
				return
			}
			if (!powerPlant && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Power Plant !" })
				return
			}
			if (!value) {
				showToast({ severity: "info", summary: "Info", detail: "Please Enter User Name !" })
				valueRef.current.focus()
				return
			}
			if (!value2) {
				showToast({ severity: "info", summary: "Info", detail: "Please Enter User SEC ID !" })
				value2Ref.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/users/${modalData?.user_id}`, fetchObject("PUT", { user_sec_name: value, role_code: userType === "normal" ? userRoles?.join(',') : userType === "admin" ? userRoles2 : null, area_code: operationArea, plant_code: powerPlant, allowed_plants: userType === "normal" ? powerPlantMulti?.map(item => item?.plant_id).join(',') : null }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleUsers(data?.data))
				setUserData({ userId: modalData?.user_id, user_sec_name: value, role_code: userType === "normal" ? userRoles?.join(',') : userType === "admin" ? userRoles2 : null, area_code: operationArea, plant_code: powerPlant, allowed_plants: userType === "normal" ? powerPlantMulti?.map(item => item?.plant_id).join(',') : null })
				showToast({ severity: 'success', summary: "Success", detail: "User Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit User" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createUser') {
			if (!userType) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select User Type !" })
				return
			}
			if ((!userRoles || userRoles?.length < 1) && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select At least 1 User Role !" })
				return
			}
			if (!userRoles2 && userType === "admin") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select User Role !" })
				return
			}
			if (!operationArea && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Operation Area !" })
				return
			}
			if (!operationArea && userType === "admin" && userRoles2 !== 1 && userRoles2 !== 2 && userRoles2 !== 9) {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Operation Area !" })
				return
			}
			if (!powerPlant && userType === "normal") {
				showToast({ severity: "info", summary: "Info", detail: "Please Select Power Plant !" })
				return
			}
			if (!value) {
				showToast({ severity: "info", summary: "Info", detail: "Please Enter User Name !" })
				valueRef.current.focus()
				return
			}
			if (!value2) {
				showToast({ severity: "info", summary: "Info", detail: "Please Enter User SEC ID !" })
				value2Ref.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/users`, fetchObject("POST", {
					user_sec_name: value, user_sec_id: value2, role_code: userType === "normal" ? userRoles?.join(',') : userType === "admin" ? userRoles2 : null
					, area_code: operationArea, plant_code: powerPlant, allowed_plants: userType === "normal" ? powerPlantMulti?.map(item => { return item?.plant_id })?.join(",") : null
				}))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createUsers({ ...data?.data, user_status: true }))
				showToast({ severity: 'success', summary: "Success", detail: "User Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create User" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editCCBlock') {
			if (!value || value?.length > 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the CC Block field & the CC Block cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/blocks/${modalData.block_id}`, fetchObject("PUT", { block_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleCCBlocks(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "CC Block Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit CC Block" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createCCBlock') {
			if (!value || value?.length > 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the CC Block field & the CC Block cannot be more than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/blocks`, fetchObject("POST", { block_name: value, plant_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createCCBlocks(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "CC Block Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create CC Block" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editBusBar') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the BusBar field & the BusBar cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/busbars/${modalData?.bus_id}`, fetchObject("PUT", { bus_volt: `${value} KV` }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleBusBar(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Busbar Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Busbar" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createBusBar') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the BusBar field & the BusBar cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/busbars`, fetchObject("POST", { bus_volt: `${value} KV` }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createBusBar(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Busbar Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Busbar" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editPhase') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Phase field & the Phase cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/phases/${modalData?.phase_id}`, fetchObject("PUT", { phase_name: value, plant_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSinglePhase({ phase_id: modalData?.phase_id, phase_name: value, plant_code: area_code }))
				showToast({ severity: 'success', summary: "Success", detail: "Phase Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Phase" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createPhase') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Phase field & the Phase cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/phases`, fetchObject("POST", { phase_name: value, plant_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createPhase(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Phase Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Phase" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editModel') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Model field & the Model cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/models/${modalData?.model_id}`, fetchObject("PUT", { model_name: value, manufacturer_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleModel(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Model Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Model" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createModel') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Model field & the Model cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/models`, fetchObject("POST", { model_name: value, manufacturer_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createModel(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Model Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Model" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editAdditiveType') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Additive Type.. Must be > 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/additive-types/${modalData?.additive_id}`, fetchObject("PUT", { additive_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleAdditiveType(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Additive Type Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Additive Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createAdditiveType') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Additive Type.. Must be > 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/additive-types`, fetchObject("POST", { additive_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createAdditiveType(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Additive Type Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Additive Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editGenerationType') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Generation Type field & the Generation Type cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/generation-type/${modalData?.gen_type_id}`, fetchObject("PUT", { gen_type: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleGenerationType(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Generation Type Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Generation Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createGenerationType') {

			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Generation Type field & the Generation Type cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/generation-type`, fetchObject("POST", { gen_type: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createGenerationType(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Generation Type Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Generation Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editManufacturer') {
			if (!value || value?.length < 2) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Area Name field & the Area Name cannot be less than 2 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/manufacturers/${modalData?.manufacturer_id}`, fetchObject("PUT", { manufacturer_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleManufacturer(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Manufacturer Edited Successfully! " })
				setLoading(false)
				setShowSharedModal(false)
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Manufacturer" : error.message })
			}
			return
		}
		if (operation === 'createStatus') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Status Abb !" })
				valueRef.current.focus()
				return
			}
			if (!value2) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Status Name !" })
				value2Ref.current.focus()
				return
			}
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/sub-status-codes`, fetchObject("POST", { sub_status_abb: value?.toUpperCase(), sub_status_name: capitalizeSentence(value2), status_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: "Status Created Successfully! " })
				setRecordData([{ ...data?.data, key: Math.random() * 1000 }, ...recordData])
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editStatus') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Status Abb !" })
				valueRef.current.focus()
				return
			}
			if (!value2) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Status Name !" })
				value2Ref.current.focus()
				return
			}
			let str = ''
			if (auxValue === "status") str = `${baseUrl}/api/v0/status-codes/${modalData?.status_id}`
			if (auxValue === "sub_status") str = `${baseUrl}/api/v0/sub-status-codes/${modalData?.sub_status_id}`
			let body = {}
			if (auxValue === "status") {
				body = { status_abb: value.toUpperCase(), status_name: capitalizeSentence(value2), unit_commissioning: false }
			}
			if (auxValue === "sub_status") {
				body = { sub_status_abb: value.toUpperCase(), sub_status_name: capitalizeSentence(value2) }
			}
			setLoading(true)
			try {
				const res = await fetch(str, fetchObject("PUT", body))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: `${auxValue === "status" ? "Status" : "Sub-Status"} Updated Successfully! ` })
				if (auxValue === "status") {
					setRecordData(recordData?.map(item => {
						if (item.status_id === modalData?.status_id) {
							return {
								...item,
								status_abb: value,
								status_name: value2
							}
						}
						return item
					}))
				}
				if (auxValue === "sub_status") {
					setRecordData(recordData?.map(item => {
						if (item.sub_status_id === modalData?.sub_status_id) {
							return {
								...item,
								sub_status_abb: value.toUpperCase(),
								sub_status_name: capitalizeSentence(value2)
							}
						}
						return item
					}))
				}
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? `Failed to edit ${auxValue === "status" ? "Status" : "Sub-Status"}` : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createFuelType') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Fuel Type !" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/fuel-types`, fetchObject("POST", { fuel_type: value, parent_fuel_id: auxValue === "parent" ? null : area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: "Fuel Type Created Successfully! " })
				setRecordData([{ plant_count: 0, ...data?.data }, ...recordData])
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Fuel Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editFuelType') {
			if (!value) {
				showToast({ severity: 'info', summary: "Info", detail: "Enter Fuel Type !" })
				valueRef.current.focus()
				return
			}
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/fuel-types/${modalData?.fuel_id}`, fetchObject("PUT", { fuel_type: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: 'success', summary: "Success", detail: "Fuel Type Updated Successfully! " })
				setRecordData(recordData?.map(item => {
					if (item.fuel_id === modalData?.fuel_id) {
						return {
							...item,
							fuel_type: value
						}
					}
					return item
				}))
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Fuel Type" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createManufacturer') {
			if (!value || value?.length < 2) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Area Name field & the Area Name cannot be less than 2 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/manufacturers`, fetchObject("POST", { manufacturer_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createManufacturer(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Manufacturer Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Manufacturer" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editNetwork') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Network Name field & the Area Name cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/networks/${modalData?.network_id}`, fetchObject("PUT", { network_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleNetwork(data?.data))
				showToast({ severity: 'success', summary: "Success", detail: "Network Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed toedit Network" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'createNetwork') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Network Name field & the Area Name cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/networks`, fetchObject("POST", { network_name: value, area_code: area_code }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createNetwork(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Network Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Network" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'editOperationArea') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Area Name field & the Area Name cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/areas/${modalData?.area_id}`, fetchObject("PUT", { area_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editSingleOperationArea(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Operation Area Edited Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Operation Area" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}

		}
		if (operation === 'createOperationArea') {
			if (!value || value?.length < 3) {
				showToast({ severity: 'info', summary: "Info", detail: "Please Make sure to fill the Area Name field & the Area Name cannot be less than 3 characters long!" })
				valueRef.current.focus()
				return
			}
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/areas`, fetchObject("POST", { area_name: value }))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				dispatch(createOperationArea(data.data))
				showToast({ severity: 'success', summary: "Success", detail: "Operation Area Created Successfully! " })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to create Operation Area" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === 'submitUnitDailyEnergy') {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-daily-energy`, fetchObject("POST", bigRes))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit Daily Energy Submitted Successfully" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Unit Daily Energy" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
				return
			}
		}
		if (operation === "resetUnitDailyEnergy" || operation === "resetDailyHourlyData") {
			setFormData(formDataBackUp);
			setRecordData(recordDataBackUp);
			showToast({
				severity: "success",
				summary: "Success",
				detail: "Data has been reset successfully !",
			});
			setShowSharedModal(false);
			return;
		}
		if (operation === "resetPlantFuelStatus" || operation === "resetFuelAdditiveStatus") {
			setRecordData(recordDataBackUp);
			showToast({
				severity: "success",
				summary: "Success",
				detail: "Data has been reset successfully !",
			});
			setShowSharedModal(false);
			return;
		}
		if (operation === "submitDailyHourlyData") {
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-hourly-data`, fetchObject("POST", {
					plant_weather: {
						...recordData,
						amb_temp: mark === "positive" ? recordData.amb_temp : -Number(recordData.amb_temp),
						record_timestamp: recordTimeStamp,
					},
					unit_hourly_load: formData,
				}));
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Unit Hourly Data Has been submitted successfully !" })
				setTablePageNumber(prev => +prev + 1)
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Hourly Data" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "submitUnitDailyFuel") {
			let formDataHandled = formData?.map(item => {
				return {
					...item, record_timestamp: formatDate(new Date(item.record_timestamp).toLocaleDateString('en-US', {
						year: "numeric", month: "2-digit", day: "2-digit"
					}))
				}
			})
			setLoading(true)
			try {
				const res = await fetch(`${baseUrl}/api/v0/unit-daily-fuel`, fetchObject("POST", formDataHandled))
				const data = await res.json()
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "This Operation Has Been SuccessFull" })
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Unit Daily Fuel" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false)
			}
		}
		if (operation === "changePowerPlantStatus") {
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/plants/update-plant-status/${modalData.plant_id}`, fetchObject("PUT"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckFetchedData(modalData.plant_id));
				showToast({ severity: "success", summary: "Success", detail: data.data.message });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Power Plant Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "changeGenerationUnitStatus") {
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/units/update-unit-status/${modalData.unit_id}?Action=${modalData.unit_status}`, fetchObject("PUT"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckGenerationUnit(modalData.unit_id));
				let toastMessage
				if (modalData.unit_status === "Op") {
					toastMessage = `${modalData.unit_name} has Successfully changed status from Operating to Retired !`
				}
				if (modalData.unit_status === "Uc") {
					toastMessage = `${modalData.unit_name} has Successfully changed status from Under Commission to Operating !`
				}
				if (modalData.unit_status === "Ret") {
					toastMessage = `${modalData.unit_name} has Successfully changed status from Retired to Under Commission !`
				}
				showToast({ severity: "success", summary: "Success", detail: toastMessage });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Generation Unit Status" : error.message })
				return;
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "ChangeCoolingSystemStatus") {
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/cooling-systems/update-cooling-system-status/${modalData.cooling_system_id}`, fetchObject("PUT"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckCoolingSystem(modalData.cooling_system_id));
				showToast({ severity: "success", summary: "Success", detail: "Cooling System Status changed Successfully" });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Cooling System Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "changeFuelTankStatus") {
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/tanks/update-tank-status/${modalData.tank_id}`, fetchObject("PUT"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckFuelTank(modalData.tank_id));
				showToast({ severity: "success", summary: "Success", detail: data.data.messaage });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Fuel Tank Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "savePlantFuelStatus") {
			let endStockchecker = 0
			modalData?.forEach((item) => {
				if (item?.fuel_code !== 4 && item?.fuel_data?.end_stock < 0) {
					endStockchecker = 1
				}
			})
			if (endStockchecker === 1 && lastHour === false) {
				showToast({ severity: "warn", summary: "Warn", detail: "Be careful .. You are about to save the <End Stock> as negative value!" })
				setLastHour(true)
				setShowSharedModal(false)
				return
			}
			try {
				setLoading(true)
				let handledMOdalData = modalData?.map((item) => {
					if (item?.fuel_code !== 4) {
						return {
							...item, fuel_data: {
								...item?.fuel_data,
								net_heat_rate: item?.fuel_data?.uom === "kcal/kg" ? item?.fuel_data?.net_heat_rate * 3.9655 : item?.fuel_data?.net_heat_rate,
								received: Number(item?.fuel_data?.received) > 0 ? Number(item?.fuel_data?.received) : 0,
								sludge: Number(item?.fuel_data?.sludge) > 0 ? Number(item?.fuel_data?.sludge) : 0,
							}
						}
					} else return item
				})
				const res = await fetch(`${baseUrl}/api/v0/plant-daily-fuel`, fetchObject("POST", handledMOdalData));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Plant Fuel Status Data submitted Successfully !" });
				setLoading(false)
				setShowSharedModal(false);
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Plant Fuel Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "saveFuelAdditiveStatus") {
			let endStockchecker = 0
			modalData?.forEach((item) => {
				if (item?.additive_data?.end_stock < 0) {
					endStockchecker = 1
				}
			})
			if (endStockchecker === 1 && lastHour === false) {
				showToast({ severity: "warn", summary: "Warn", detail: "Be careful .. You are about to save the <End Stock> as negative value!" })
				setLastHour(true)
				setShowSharedModal(false)
				return
			}

			try {

				let handledMOdalData = modalData?.map((item) => {
					return {
						...item,
						additive_data: {
							...item?.additive_data,
							additive_consumed: item?.additive_data?.additive_consumed ? Number(item?.additive_data?.additive_consumed) : 0,
							additive_open: item?.additive_data?.additive_open ? Number(item?.additive_data?.additive_open) : 0,
							additive_received: item?.additive_data?.additive_received ? Number(item?.additive_data?.additive_received) : 0,
							plant_name: auxValue
						}
					}
				})
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/plant-monthly-additive`, fetchObject("POST", handledMOdalData));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				showToast({ severity: "success", summary: "Success", detail: "Fuel Additive Status Data submitted Successfully !" });

			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to submit Fuel Additive Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
		if (operation === "changeOrganizationStatus") {
			try {
				setLoading(true)
				const res = await fetch(`${baseUrl}/api/v0/organizations/update-orgnization-status/${modalData?.org_id}`, fetchObject("PUT"));
				const data = await res.json();
				if (!res.ok) throw new Error(data.error.message)
				dispatch(editCheckOrganization(modalData?.org_id))
				showToast({ severity: "success", summary: "Success", detail: "Organization Status Changed Successfully !" });
			} catch (error) {
				showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to edit Organization Status" : error.message })
			} finally {
				setLoading(false)
				setShowSharedModal(false);
				return
			}
		}
	};
	const [userRolesOptions, setUserRolesOptions] = useState(null)
	const [userRolesOptions2, setUserRolesOptions2] = useState(null)
	const [fetchedEditData, setFetchedEditData] = useState(null)
	const [operationArea, setOperationArea] = useState(fetchedEditData ? fetchedEditData?.area_code : null)
	const [powerPlant, setPowerPlant] = useState(operation === "editPlantFuel" ? modalData?.child_fuel_code : null)
	const [powerPlantMulti, setPowerPlantMulti] = useState(null)
	const [powerPlantDropDownData, setPowerPlantDropDownData] = useState([])
	const [userRoles, setUserRoles] = useState(null)
	const [userRoles2, setUserRoles2] = useState("normal")
	const [userType, setUserType] = useState(null)
	const childFuelDropDown = useMemo(
		() => (
			<PrimeDropdown
				value={powerPlant}
				onChange={(value) => {
					setPowerPlant(value);
				}}
				title='Child Fuel'
				disabled={(!operationArea || operationArea?.length < 1) && operation === "createPlantFuel"}
				checker={(operationArea && operation === 'createPlantFuel') || operation === "editPlantFuel"}
				filter
				redStar
				endpoint={`api/v0/child-fuel-dropdown?parent_fuel_id=${operation === "editPlantFuel" ? modalData?.parent_fuel_code
					: operationArea}`}
				placeholder='Select Fuel Type'
				operation={"Child Fuel"}

			/>
		),
		// eslint-disable-next-line
		[operationArea, powerPlant]
	);
	const handleClickPowerPlant = (value) => {
		powerPlantDropDownData?.[0]?.plant_list?.forEach(item => {
			if (item?.plant_id === value) {
				setPowerPlantMulti([item])
			}
		})
	}
	const powerPlantDropDown = useMemo(
		() => (
			<PrimeDropdown
				value={powerPlant}
				onChange={(value) => {
					setPowerPlant(value);
					handleClickPowerPlant(value)
				}}
				title='Power Plant'
				disabled={!operationArea || operationArea?.length < 1}
				checker={operationArea}
				filter
				checkingValue={operationArea}
				redStar
				endpoint={`api/v0/plants-dropdown?area_code=${operationArea}`}
				placeholder='Select Plant'
				operation={"Power Plant"}
				onClick={() => {
					if (!operationArea || operationArea?.length < 1) {
						showToast({
							severity: "info",
							summary: "Info",
							detail: "Select Operation Area !",
						});
						return;
					}
				}}
			/>
		),
		[operationArea, powerPlant, powerPlantDropDownData]
	);
	const powerPlantDropDownMulti = useMemo(
		() => (
			<PrimeMultiSelect
				value={powerPlantMulti}
				onChange={(value) => {
					setPowerPlantMulti(value);
				}}
				disabled={!operationArea || operationArea?.length < 1}
				checker={operationArea}
				endpoint={`api/v0/plants-dropdown?area_code=${operationArea}`}
				placeholder='Select Plant'
				filter
				redStar
				operation={"Power Plant"}
				setOptions={setPowerPlantDropDownData}
				optionGroupLabel="area_name"
				optionGroupChildren="plant_list"
				optionLabel="plant_name"
				title="User Plants"
				onClick={() => {
					if (!operationArea || operationArea?.length < 1) {
						showToast({
							severity: "info",
							summary: "Info",
							detail: "Select Operation Area !",
						});
						return;
					}
					if (!powerPlant) {
						showToast({
							severity: "info",
							summary: "Info",
							detail: "Select Power Plant !",
						});
						return;
					}
				}}
			/>
		),
		// eslint-disable-next-line
		[operationArea, powerPlantMulti, powerPlant, powerPlantDropDownData]
	);
	useEffect(() => {
		if (operation === "createUser" || operation === "editUser") {
			const fetchUserRoles = async () => {
				try {
					const userRolesRes = await fetch(`${baseUrl}/api/v0/roles-dropdown`, fetchObject("GET"))
					const userRolesData = await userRolesRes.json();
					if (!userRolesRes.ok) throw new Error(userRolesData.error.message)
					let singleSelectUsers = []
					let multiSelectUsers = []
					userRolesData?.data?.forEach(item => {
						if (item?.value === 1 || item?.value === 2 || item?.value === 3 || item?.value === 4 || item?.value === 9) {
							singleSelectUsers.push(item)
						} else {
							multiSelectUsers.push(item)
						}
					});
					setUserRolesOptions(multiSelectUsers)
					setUserRolesOptions2(singleSelectUsers)
				} catch (error) {
					setUserRolesOptions([])
					setUserRolesOptions2([])
					showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to fetch User Roles" : error.message })
				}
			}
			fetchUserRoles()
			if (operation === "editUser") {
				const fetchUserData = async () => {
					try {
						const userDataRes = await fetch(`${baseUrl}/api/v0/users/${modalData?.user_id}`, fetchObject("GET"))
						const userDataData = await userDataRes.json();
						if (!userDataRes.ok) throw new Error(userDataData.error.message)
						const handledUserData = userDataData?.data[0]
						setFetchedEditData(userDataData?.data)
						setOperationArea(handledUserData?.area_code)
						setPowerPlant(handledUserData?.plant_code)
						setValue(handledUserData?.user_sec_name)
						setValue2(handledUserData?.user_sec_id)
						if (handledUserData?.user_roles?.includes(1) || handledUserData?.user_roles?.includes(2) || handledUserData?.user_roles?.includes(3) || handledUserData?.user_roles?.includes(4) || handledUserData?.user_roles?.includes(9)) {
							setUserType('admin')
							setUserRoles2(Number(handledUserData?.user_roles))
						} else {
							setUserType('normal')
							setUserRoles(handledUserData?.user_roles?.split(',')?.map(Number))
							const res2 = await fetch(`${baseUrl}/api/v0/plants-dropdown?area_code=${handledUserData?.area_code}`, fetchObject("GET"))
							const data2 = await res2.json()
							if (!res2.ok) throw new Error("Failed to fetch User Plants(s)")
							setPowerPlantDropDownData(data2?.data[0]?.plant_list)
							let arr = []
							data2?.data[0]?.plant_list.forEach(item => {
								if (handledUserData?.allowed_plants?.includes(item?.plant_id)) {
									arr.push(item)
								}
							})
							setPowerPlantMulti(arr)
						}
					} catch (error) {
						setPowerPlantDropDownData([])
						setFetchedEditData(null)
						setOperationArea(null)
						setPowerPlant(null)
						setValue(null)
						setValue2(null)
						showToast({ detail: error?.message?.includes("Unexpected") ? "Failed to fetch User Data" : error.message })
					}
				}
				fetchUserData()
			}
		}
		// eslint-disable-next-line
	}, [])
	console.log({ modalData })
	return ReactDOM.createPortal(
		<div className={`flex z-[101] fixed inset-0 bg-gray-900/80 items-center justify-center overflow-hidden`}>
			<motion.div
				ref={reference}
				{...modalAnimations}
				className={`bg-white flex items-center rounded-xl justify-center gap-4 flex-col min-w-[400px] p-5 ${page === 'userListingPage' ? 'w-[950px]' : page === 'userListingPage2' ? 'w-[1200px]' : "w-fit"}  `}
			>
				{((operation === "resetDailyHourlyData" || operation === "submitDailyHourlyData" || operation === "resetPlantFuelStatus" || condition === "changeStatus" || condition === "confirmation" || condition === "changeOrder" || condition === "exception") && operation !== "alertReload") && (
					<motion.span initial={{ x: 0 }} animate={{ x: [-20, 20, -10, 10, -5, 5, 0] }}>
						<PiQuestionLight className='alertModalIcon text-sky-300 h-24 w-24 md:h-36 md:w-36' />
					</motion.span>
				)}
				{condition === "deletion" && (
					<motion.span initial={{ x: 0 }} animate={{ x: [-20, 20, -10, 10, -5, 5, 0] }}>
						<PiQuestionLight className='alertModalIcon text-red-500 h-24 w-24 md:h-36 md:w-36' />
					</motion.span>
				)}
				{(operation === "alertReload") && (
					<motion.span initial={{ x: 0 }} animate={{ x: [-20, 20, -10, 10, -5, 5, 0] }}>
						<TfiReload className='text-basic h-24 w-24' />
					</motion.span>
				)}
				{(operation === "resetPlantFuelStatus" || condition === "changeStatus" || condition === "confirmation" || condition === "changeOrder" || condition === "deletion" || condition === "exception") && (
					<p className={`text-[24px] sm:text-[30px] md:text-[35px] font-semibold ${operation === "alertReload" ? "text-basic" : ""}`}>
						{operation === "alertReload" ? "Update" : "Confirmation"}
					</p>
				)}
				{(operation === "cancelCreateUnitStatus" || operation === "cancelEditUnitStatus") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel Unit Status {operation === "cancelCreateUnitStatus" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "handleISRSUnitStatus" || operation === "handleISRSInjectUnitStatus" || operation === "submitEditISRSUnitStatus") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center max-w-lg'>
						This unit suffered from derates recently
					</p>
				)}
				{(operation === "submitInjectUnitStatus") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center max-w-lg'>
						Are you sure you want to inject this status ?
					</p>
				)}
				{operation === "changePowerPlantStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.plant_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.plant_name} ?
					</div>
				)}
				{(operation === "changePowerPlantsOrder" || operation === "changeGenerationUnitsOrder") && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to submit this order ?
					</div>
				)}
				{(operation === "deleteUnitDerate") && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to delete this derate ?
					</div>
				)}
				{operation === "changePlantFuelStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.fuel_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.fuel_type} {`(${modalData?.child_fuel_type})`}?
					</div>
				)}
				{operation === "editUserStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.user_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.user_sec_name} ?
					</div>
				)}
				{operation === "changeGenerationUnitStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.unit_status === "Op"
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.unit_name} ?
					</div>
				)}
				{operation === "ChangeCoolingSystemStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.cooling_system_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.cooling_system_name} ?
					</div>
				)}
				{operation === "changeFuelTankStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.tank_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.tank_name} ?
					</div>
				)}
				{operation === "changeOrganizationStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.org_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.org_name} ?
					</div>
				)}
				{operation === "changePlantAdditiveStatus" && (
					<div className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{modalData.additive_status
							? "Are you sure you want to de-activate"
							: "Are you sure you want to activate"}{" "}
						{modalData.additive_name} ?
					</div>
				)}
				{operation === "submitImportantEventCreate" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Create Important Event ?
					</p>
				)}
				{operation === "submitBulkInsert" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Bulk Insert selected units ?
					</p>
				)}
				{operation === "submitImportantEventEdit" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Edit Important Event ?
					</p>
				)}
				{operation === "submitComment" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit this Comment ?
					</p>
				)}
				{operation === "editComment" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Update this Comment ?
					</p>
				)}
				{operation === "replyComment" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Reply ?
					</p>
				)}
				{operation === "resetUnitDailyEnergy" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Reset Unit Daily Energy ?
					</p>
				)}
				{operation === "resetUnitDailyFuel" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Reset Unit Fuel Consumption ?
					</p>
				)}
				{(operation === "cancelCreatePerformanceTest" || operation === "cancelEditPerformanceTest") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel Performance Test {operation === "cancelCreatePerformanceTest" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "confirmCreatePerformanceTest" || operation === "confirmEditPerformanceTest") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Confirm Performance Test {operation === "confirmCreatePerformanceTest" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "cancelCreateDegrade" || operation === "cancelEditDegrade") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel Unit Degrade {operation === "cancelCreateDegrade" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "cancelCreateNonCurt" || operation === "cancelEditNonCurt") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel Unit Non-Curtailing {operation === "cancelCreateNonCurt" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "confirmCreateNonCurt" || operation === "confirmEditNonCurt") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "confirmCreateNonCurt" ? "Create" : "Edit"} Unit Non-Curtailing ?
					</p>
				)}
				{(operation === "confirmCreateDerate" || operation === "confirmEditDerate") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "confirmCreateDerate" ? "Create" : "Edit"} Unit Derate ?
					</p>
				)}
				{(operation === "cancelCreateDerate" || operation === "cancelEditDerate") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel Unit Derate {operation === "cancelCreateDerate" ? "Creation" : "Edit"} ?
					</p>
				)}
				{(operation === "cancelCreatePowerPlant" || operation === "cancelEditPowerPlant") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel {operation === "cancelCreatePowerPlant" ? "Create" : "Edit"} Power Plant ?
					</p>
				)}
				{(operation === "cancelCreateGenerationUnit" || operation === "cancelEditGenerationUnit") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel {operation === "cancelCreateGenerationUnit" ? "Create" : "Edit"} Generation Unit ?
					</p>
				)}
				{(operation === "submitCreatePowerPlant" || operation === "submitEditPowerPlant") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit {operation === "submitCreatePowerPlant" ? "Create" : "Edit"} Power Plant ?
					</p>
				)}
				{(operation === "submitCreateUnitStatus" || operation === "submitEditUnitStatus") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "submitCreateUnitStatus" ? "Create" : "Edit"} Unit Status ?
					</p>
				)}
				{(operation === "cancelCreateCoolingSystem" || operation === "cancelEditCoolingSystem") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel {operation === "cancelCreateCoolingSystem" ? "Create" : "Edit"} Cooling System ?
					</p>
				)}
				{(operation === "submitCreateCoolingSystem" || operation === "submitEditCoolingSystem") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "submitCreateCoolingSystem" ? "Create" : "Edit"} Cooling System ?
					</p>
				)}
				{(operation === "cancelCreateFuelTank" || operation === "cancelEditFuelTank") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Cancel {operation === "cancelCreateFuelTank" ? "Create" : "Edit"} Fuel Tank ?
					</p>
				)}
				{(operation === "submitCreateFuelTank" || operation === "submitEditFuelTank") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "submitCreateFuelTank" ? "Create" : "Edit"} Fuel Tank ?
					</p>
				)}
				{(operation === "submitCreateGenerationUnit" || operation === "submitEditGenerationUnit") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "submitCreateGenerationUnit" ? "Create" : "Edit"} Generation Unit ?
					</p>
				)}
				{operation === "resetDailyHourlyData" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Reset Daily Hourly Data ?
					</p>
				)}
				{operation === "submitUnitDailyEnergy" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Unit Daily Energy ?
					</p>
				)}
				{operation === "resetPlantFuelStatus" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Reset Plant Fuel Status Data ?
					</p>
				)}
				{operation === "resetFuelAdditiveStatus" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to ResetFuel Additive Status Data ?
					</p>
				)}
				{operation === "alertReload" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						{stringValue}
					</p>
				)}
				{operation === "savePlantFuelStatus" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Plant Fuel Status Data ?
					</p>
				)}
				{operation === "saveFuelAdditiveStatus" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Fuel Additive Status Data ?
					</p>
				)}
				{operation === "submitDailyHourlyData" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Daily Hourly Data ?
					</p>
				)}
				{operation === "submitUnitDailyFuel" && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to Submit Unit Daily Fuel ?
					</p>
				)}
				{(operation === "confirmEditDegrade" || operation === "confirmCreateDegrade") && (
					<p className='text-[16px] sm:text-[20px] md:text-[22px] text-center'>
						Are you sure you want to {operation === "confirmCreateDegrade" ? "Create" : "Edit"} Unit Degrade ?
					</p>
				)}
				{operation === "createOperationArea" && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">Create Operation Area</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Area Name"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Area Name"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form>

					</div>
				)}
				{operation === "editOperationArea" && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full  ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">Edit Operation Area</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Area Name"}
								value={value}
								redStar
								refrence={valueRef}
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								label={"Area Name"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form>

					</div>
				)}
				{(operation === "createNetwork" || operation === "editNetwork") && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full  ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">{operation === "createNetwork" ? "Create Network" : "Edit Network"}</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className="flex w-full items-center justify-start gap-5">
								<div className='flex justify-start flex-col  w-[60%]'>
									<label
										className='pl-2 flex items-center'>

										{"Network Name"}
										<span className='text-red-500 pl-1'>*</span>
									</label>
									<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
										<input
											onClick={() => {
												if (operation === 'editUser') {
													showToast({ severity: "warn", summary: "Warn", detail: "It's Forbidden to edit this field in Edit mode!" })
													return
												}
											}}
											required
											className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white  disabled:bg-gray-300 disabled:cursor-not-allowed`}
											type={"text"}
											name=''
											value={value}
											ref={valueRef}
											placeholder='Enter Network Name...'
											onChange={(e) => setValue(e.target.value)}
										/>
									</div>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form>

					</div>
				)}
				{(operation === "submitUnitDailyEnergy" || operation === "resetPlantFuelStatus" || condition === "changeStatus" || condition === "confirmation" || condition === "changeOrder" || condition === "deletion") && (
					<div className='flex items-center justify-center gap-4 text-white'>
						<SharedLoadingBtn label={operation === "alertReload" ? "OK" : "YES!"} loading={loading} handleClick={handleClick} operation={operation} />
						{operation !== "alertReload" && (
							<button
								onClick={() => setShowSharedModal(false)}
								className='h-12 w-20 flex items-center justify-center text-center bg-red-400 rounded-md hover:scale-[102%] active:scale-[90%] duration-300 sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
								NO!
							</button>
						)}
					</div>
				)}
				{condition === "exception" && (
					<>
						<div className='flex items-center justify-center gap-4 text-white mx-10'>
							<SharedLoadingBtn label={operation === "alertReload" ? "OK" : "Restore & Save"} loading={loading} handleClick={handleClick} operation={operation} />
							<button
								onClick={handleSaveOnly}
								disabled={loading}
								className='h-12 min-w-20 w-fit px-1 flex items-center justify-center text-center bg-basic rounded-md hover:scale-[102%] active:scale-[90%] duration-300 sm:text-xl md:text-2xl active:ring-4 ring-orange-300'>
								{loading ? <div className="h-5 w-5 rounded-full border-2 border-white animate-spin border-l-transparent" /> : "Save Only"}
							</button>
							<button
								onClick={() => setShowSharedModal(false)}
								className='h-12 w-fit px-1 flex items-center justify-center text-center bg-red-400 rounded-md hover:scale-[102%] active:scale-[90%] duration-300 sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
								Cancel
							</button>
						</div>
						<div className="w-full mx-5 border-t" />
						<div className='flex flex-col items-center justify-center gap-4 text-zinc-700 text-sm  font-semibold'>
							<span className="flex "> <p className="text-basic">Save Only</p> : Saves the status only without restoring derates</span>
							<span className="flex "> <p className="text-green-400">Save & Restore</p> : Saves the status and restores previous derates</span>


						</div>
					</>
				)}
				{operation === "createManufacturer" && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">Create Manufacturer</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Manufacturer Name"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Manufacturer Name"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form>
					</div>
				)}
				{operation === "editManufacturer" && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">Edit Manufacturer</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Manufacturer Name"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Manufacturer Name"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === "createStatus" || operation === "editStatus") && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">{operation === "createFuelType" ? "Create" : "Edit"} Status</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className="flex space-x-2">
								<Input
									placeholder={auxValue === "status" ? "Enter Status Abb" : "Enter Sub-Status Abb"}
									value={value}
									redStar
									className={'bg-white w-[80%]'}
									refrence={valueRef}
									label={auxValue === "status" ? "Status Abb" : "Sub-Status Abb"}
									onChenging={(e) => { setValue(e.target.value) }}
								/>
								<Input
									placeholder={auxValue === "status" ? "Enter Status Name" : "Enter Sub-Status Name"}
									value={value2}
									redStar
									className={'bg-white w-[250%] '}
									refrence={value2Ref}
									label={auxValue === "status" ? "Status Name" : "Sub-Status Name"}
									onChenging={(e) => { setValue2(e.target.value) }}
								/>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === "createFuelType" || operation === "editFuelType") && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full ">{operation === "createFuelType" ? "Create" : "Edit"} Fuel Type</h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Fuel Type"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Fuel Type"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'createGenerationType' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Create Generation Type </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Gen. Type"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Generation Type"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'editGenerationType' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit Generation Type </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Gen. Type"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Generation Type"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'editAdditiveType' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit Additive Type </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Add. Type"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Additive Type"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'createAdditiveType' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Create Additive Type </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Add. Type"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Additive Type"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'editModel' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit Model </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Model"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Model"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'createModel' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Create Model </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Model"}
								value={value}
								page={"userListingPageModal"}
								redStar
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Model"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'createPhase' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Create Phase </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Phase"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Phase"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{operation === 'editPhase' && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">

						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit Phase </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<Input
								placeholder={"Enter Phase"}
								value={value}
								redStar
								page={"userListingPageModal"}
								className={'bg-white w-full'}
								refrence={valueRef}
								label={"Phase"}
								onChenging={(e) => { setValue(e.target.value) }}
							/>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createBusBar' || operation === 'editBusBar') && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createBusBar" ? "Create BusBar" : "Edit BusBar"} </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className='flex justify-start flex-col  w-full'>
								<label
									htmlFor={"thermal_storage_capacity"}
									className='pl-2 flex items-center'>
									{" "}
									{"BusBar Value"}{" "}
								</label>
								<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
									<input
										className={`bg-white outline-none  py-3 px-5 flex-1`}
										type={"text"}
										name=''
										inputMode='numeric'
										ref={valueRef}
										pattern='[0-9]+'
										value={value}
										placeholder='Enter BusBar Value...'
										onChange={(e) => {
											if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
												setValue(e.target.value);
											}
										}}
									/>
									<span className='bg-gray-300 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
										KV
									</span>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createController' || operation === 'editController') && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createController" ? "Create Controller" : "Edit Controller"} </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className='flex justify-start flex-col  w-full'>
								<label
									htmlFor={"thermal_storage_capacity"}
									className='pl-2 flex items-center'>
									{" "}
									{"Controller Name"}{" "}<span className="text-red-500 pl-1">*</span>
								</label>
								<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
									<input
										className={`outline-none  py-3 px-5 flex-1 bg-white`}
										type={"text"}
										ref={valueRef}
										value={value}
										placeholder='Enter Controller Name...'
										onChange={(e) => setValue(e.target.value)}
									/>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createCCBlock' || operation === 'editCCBlock') && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createCCBlock" ? "Create CC Block" : "Edit CC Block"} </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className="flex items-center justify-start w-full space-x-3">
								<div className='flex justify-start flex-col  w-[40%]'>
									<label
										className='pl-2 flex items-center'>
										{"Block Name"}
										<span className='text-red-500 pl-1'>*</span>
									</label>
									<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
										<input
											required
											className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white capitalize `}
											type={"text"}
											value={value}
											ref={valueRef}
											placeholder='Enter Block Name...'
											onChange={(e) => setValue(e.target.value)}
										/>
									</div>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createUser' || operation === "editUser") && (
					<div className="flex flex-col text-gray-600 w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createUser" ? "Create User" : "Edit User"} </h1>
						<form className="flex flex-col items-start justify-center  w-full bg-gray-200 rounded-lg p-6">
							<div className="flex flex-col gap-[3%] w-full">
								<div className='flex w-full  pb-5  gap-[3%] justify-start '>
									<div className="w-[22.7%]">
										<PrimeDropdown
											value={userType}
											onChange={(value) => {
												setUserType(value)
												setOperationArea(null)
												setPowerPlant(null)
												setUserRoles(null)
												setUserRoles2(null)
											}}
											title='User Type'
											options={[{ label: "High level user", value: "admin" }, { label: "Normal user", value: "normal" }]}
											redStar
											itemTemplate={(item) => (<div className="flex flex-col max-w-[200px]">
												<div className="text-[17px] text-gray-700">{item?.label}</div>
												<div className="text-[12px] text-gray-500">{item?.description}</div>
											</div>)}
											placeholder='Select Role'
										/>
									</div>
									{userType === "normal" && (
										<div className="w-[22.7%]">
											<PrimeMultiSelect
												value={userRoles}
												onChange={(value) => {
													setUserRoles(value)
												}}
												title='User Roles'
												options={userRolesOptions}
												redStar
												itemTemplate={(item) => (<div className="flex flex-col max-w-[200px]">
													<div className="text-[17px] text-gray-700">{item?.label}</div>
													<div className="text-[12px] text-gray-500">{item?.description}</div>
												</div>)}
												placeholder='Select Role'
											/>
										</div>
									)}
									{userType === "admin" && (
										<div className="w-[22.7%]">
											<PrimeDropdown
												value={userRoles2}
												onChange={(value) => {
													setUserRoles2(value)
													setOperationArea(null)
													setPowerPlant(null)
												}}
												title='User Roles'
												options={userRolesOptions2}
												redStar
												itemTemplate={(item) => (<div className="flex flex-col max-w-[200px]">
													<div className="text-[17px] text-gray-700">{item?.label}</div>
													<div className="text-[12px] text-gray-500">{item?.description}</div>
												</div>)}
												placeholder='Select Role'
											/>
										</div>
									)}
									{userRoles2 !== 1 && userRoles2 !== 2 && userRoles2 !== 9 && (
										<div className="w-[22.7%]">
											<PrimeDropdown
												value={operationArea}
												onChange={(value) => {
													setOperationArea(value);
													setPowerPlant(null)
													setPowerPlantMulti(null)
												}}
												title='Operation Area'
												endpoint='api/v0/areas-dropdown?area_name=null'
												placeholder='Select Area'
												redStar
												checker={true}
												operation={"Operation Area"}
											/>
										</div>
									)}
									{userType === "normal" && (
										<div className="w-[22.7%]">
											{powerPlantDropDown}
										</div>
									)}

								</div>
								<div className='flex w-full  pb-5  items-center  gap-[3%] justify-start '>
									<div className='flex justify-start flex-col  flex-1'>
										<label
											className='pl-2 flex items-center'>
											{"User Name"}
											<span className='text-red-500 pl-1'>*</span>
										</label>
										<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
											<input
												required
												className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white capitalize `}
												type={"text"}
												value={value}
												ref={valueRef}
												placeholder='Enter Name...'
												onChange={(e) => setValue(e.target.value)}
											/>
										</div>
									</div>
									<div className='flex justify-start flex-col  w-[22.7%]'>
										<label
											className='pl-2 flex items-center'>

											{"User SEC ID"}
											<span className='text-red-500 pl-1'>*</span>
										</label>
										<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
											<input
												onClick={() => {
													if (operation === 'editUser') {
														showToast({ severity: "warn", summary: "Warn", detail: "It's Forbidden to edit this field in Edit mode!" })
														return
													}
												}}
												required
												className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white  disabled:bg-gray-300 disabled:cursor-not-allowed`}
												type={"text"}
												name=''
												disabled={operation === "editUser"}
												inputMode='numeric'
												pattern='[0-9]+'
												value={value2}
												ref={value2Ref}
												placeholder='Enter SEC ID...'
												onChange={(e) => {
													if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
														setValue2(e.target.value);
													}
												}}
											/>
										</div>
									</div>
									{userType === "normal" && (
										<div className='flex justify-start flex-col  w-[22.7%]'>
											{powerPlantDropDownMulti}
										</div>
									)}
								</div>
							</div>
							<div className='flex  justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form>

					</div>
				)}
				{(operation === 'createOrganization' || operation === 'editOrganization') && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createOrganization" ? "Create Organization" : "Edit Organization"} </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className="flex items-center justify-start w-full space-x-3">
								<div className='flex justify-start flex-col  w-[40%]'>
									<label
										className='pl-2 flex items-center'>
										{"Organization Name"}
										<span className='text-red-500 pl-1'>*</span>
									</label>
									<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
										<input
											required
											className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white capitalize `}
											type={"text"}
											value={value}
											ref={valueRef}
											placeholder='Enter Organization Name...'
											onChange={(e) => setValue(e.target.value)}
										/>
									</div>
								</div>

								<div className="w-[35%]">
									<PrimeDropdown
										value={value2}
										onChange={(value) => setValue2(value)}
										title='Energy Source'
										options={[{ label: "Imported", value: "Imported" }, { label: "Rented", value: "Rented" }]}
										redStar

										placeholder='Select Energy Source'
									/>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createPlantAdditive' || operation === 'editPlantAdditive') && (
					<div className="flex flex-col text-gray-600 justify-center items-start w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createPlantAdditive" ? "Create Plant Additive Type" : "Edit Plant Additive Type"} </h1>
						<form className="flex flex-col items-start justify-center w-full bg-gray-200 rounded-lg p-6">
							<div className="flex items-center justify-start w-full space-x-3">
								{operation === "createPlantAdditive" && (
									<div className='flex justify-start flex-col  w-[40%]'>
										<PrimeDropdown
											title={"Plant Additive Type"}
											value={value}
											redStar
											reference={valueRef}
											endpoint="api/v0/additive-types-dropdown"
											checker={operation === "createPlantAdditive"}
											onChange={(value) => setValue(value)}
											placeholder='Select Additive Type...'
										/>
									</div>
								)}
								<div className='flex justify-start flex-col  w-[40%]'>
									<label
										className='pl-2 flex items-center'>
										{"Priority"}
										<span className='text-red-500 pl-1'>*</span>
									</label>
									<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
										<input
											required
											className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white capitalize `}
											type={"text"}
											value={value2}
											ref={value2Ref}
											placeholder='Enter Priority...'
											onChange={(e) => {
												if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
													setValue2(e.target.value);
												}
											}}
										/>
									</div>
								</div>
							</div>
							<div className='flex items-center justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />

							</div>
						</form>

					</div>
				)}
				{(operation === 'createPlantFuel' || operation === "editPlantFuel") && (
					<div className={`flex flex-col text-gray-600 w-full ${(operationArea !== 4 && modalData?.fuel_type !== "Gas" && value !== "Pipeline") ? "" : "h-[30vh]"} `}>
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> {operation === "createPlantFuel" ? "Create Plant Fuel" : "Edit Plant Fuel"} </h1>
						<form className="flex flex-col items-start justify-center h-[40vh] w-full bg-gray-200 rounded-lg p-6">
							<div className="flex flex-col gap-[3%] w-full">
								<div className='flex w-full  pb-5  gap-[3%] justify-start '>
									{operation === "createPlantFuel" ? (
										<div className="w-[35%]">
											<PrimeDropdown
												value={operationArea}
												onChange={(value) => {
													setOperationArea(value);
													setValue(null)
												}}
												title='Parent Fuel'
												endpoint='api/v0/parent-fuel-dropdown'
												placeholder='Select Fuel Type'
												redStar
												checker={operation === 'createPlantFuel'}
												operation={"Parent Fuel"}
											/>
										</div>
									) : (
										<div className="w-[35%] flex flex-col ">
											<div className="flex">
												<p className="pl-1">Parent Fuel</p><span className="text-red-500 pl-1">*</span>
											</div>
											<div className="bg-gray-300 h-[50px] flex items-center pl-5 rounded-lg cursor-not-allowed">{modalData?.fuel_type}</div>
										</div>
									)}

									<div onClick={() => {
										if ((!operationArea || operationArea?.length < 1) && operation === "createPlantFuel") {
											showToast({
												severity: "info",
												summary: "Info",
												detail: "Select Parent Fuel !",
											});
											return;
										}
									}} className="flex w-[35%]">{childFuelDropDown}</div>

									<div className="w-[35%]">
										<PrimeDropdown
											value={value}
											onChange={(value) => setValue(value)}
											title='Transport Method'
											options={(operationArea === 4 || modalData?.fuel_type === "Gas") ? [{ label: "Pipeline", value: "Pipeline" }] : [
												{ label: "Truck", value: "Truck" },
												{ label: "Ship", value: "Ship" },
												{ label: "Pipeline", value: "Pipeline" },
											]}
											redStar
											itemTemplate={(item) => (<div className="flex flex-col max-w-[200px]">
												<div className="text-[17px] text-gray-700">{item?.label}</div>
											</div>)}
											placeholder='Select Transport Method'
										/>
									</div>
								</div>
								<div className='flex w-full  pb-5  items-center  gap-[3%] justify-start '>
									{(operationArea !== 4 && modalData?.fuel_type !== "Gas" && value !== "Pipeline") && (
										<div className='flex justify-start flex-col  w-[31.2%]'>
											<label
												className='pl-2 flex items-center'>

												{"Coverage Days"}
												<span className='text-red-500 pl-1'>*</span>
											</label>
											<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg focus-within:ring-basic focus-within:ring duration-300 transition-all'>
												<input
													onClick={() => {
														if (operation === 'editUser') {
															showToast({ severity: "warn", summary: "Warn", detail: "It's Forbidden to edit this field in Edit mode!" })
															return
														}
													}}
													required
													className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white  disabled:bg-gray-300 disabled:cursor-not-allowed`}
													type={"text"}
													name=''
													disabled={operation === "editUser"}
													inputMode='numeric'
													pattern='[0-9]+'
													value={value2}
													ref={value2Ref}
													placeholder='Enter Coverage Days...'
													onChange={(e) => {
														if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
															setValue2(e.target.value);
														}
													}}
												/>
											</div>
										</div>
									)}

								</div>
							</div >
							<div className='flex  justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form >

					</div >
				)}
				{operation === 'expandUser' && (
					<div className="flex flex-col text-gray-600 w-full h-[60vh] relative ">
						{/* <div className="absolute top-5 left-5 rounded-lg flex">
							<input type="text" value={searchText} onChange={handleInputChange} className="" />
							<button onClick={handleHighlightText}>Highlight</button>
						</div> */}
						<div className="z-1 text-2xl h-[60px] font-semibold text-center mb-2 w-full bg-white flex items-center justify-between">
							<h1 className="flex-1"> User Log</h1>
							<motion.span animate={{ borderRadius: "50%" }} whileHover={{ borderRadius: "35%" }} transition={{ duration: 0 }} onClick={() => setShowSharedModal(false)} className="bg-red-400 h-8 w-8 min-h-8 min-w-8 mr-2 text-white  flex items-center justify-center transition-all duration-500 cursor-pointer hover:bg-red-600 active:scale-95  hover:scale-[101%]">
								<IoClose size={20} />
							</motion.span>
						</div>
						<div className="flex flex-col h-full space-y-3 items-start font-semibold  w-full bg-gray-200 rounded-lg p-6 overflow-y-auto">
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">User ID </div>
								<div className="flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l">{modalData?.user_sec_id}</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">User Name </div>
								<div className="flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l">{modalData?.user_sec_name}</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">Level </div>
								<div className="flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l">{modalData?.level}</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">Time </div>
								<div className="flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l">{handleAbFormDateTime(modalData?.record_timestamp)}</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">Method </div>
								<div className={`flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l`}><span className={`rounded-lg p-1 text-slate-50 ${modalData?.http_method === "POST" && 'bg-yellow-500'} ${modalData?.http_method === "PUT" && 'bg-blue-400'} ${modalData?.http_method === "GET" && 'bg-green-400'}`}>
									{modalData?.http_method}
								</span>
								</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">URL </div>
								<div className="flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l">{modalData?.url_path}</div>
							</div>
							<div className="flex space-x-3 w-full">
								<div className="flex-[0.15] p-1  ">Response </div>
								<div className={`flex-[0.9] p-1 pl-3 border-gray-900 hover:border-black border-l ${modalData?.level === "error" && " text-red-500 "}`}>
									{/* Condition Based on AuxValue [ string / JSON ] */}
									{auxValue === false && modalData?.response_info}
									{/* // If DATA is JSON ====>> */}
									{auxValue === true && (<div className="flex flex-col w-full gap-[1.5%]">
										{/* If DATA is Array */}
										{Array.isArray(formData) === true && formData?.map((item, index) => (<div key={index} className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
											{userExpansionArrKeys?.map((item2, index2) => (<div key={index2} className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
												<span className="w-[30%]">{item2}</span>
												<span className="w-[50%] border-l border-l-gray-700 pl-1">{item[item2]}</span>
											</div>))}
										</div>))}
										{/* If DATA is Object */}
										{Array.isArray(formData) === false && formData?.plant_weather === undefined && formData?.unit_daily_energy === undefined && (
											<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
												{userExpansionArrKeys?.map((item, index) => (<div key={index} className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{item}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData[item]}</span>
												</div>))}
											</div>
										)}
										{/* Formdata has plant_weather */}
										{Array.isArray(formData) === false && formData?.plant_weather !== undefined && formData?.unit_daily_energy === undefined && (
											<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-full mx-auto text-center">{"Plant Weather"}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"$action"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.$action}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"amb_temp"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.amb_temp}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"gas_pressure"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.gas_pressure}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"humidity"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.humidity}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"plant_code"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.plant_code}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"plant_name"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.plant_name}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"record_id"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.record_id}</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1 ">
													<span className="w-[30%]">{"record_timestamp"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{formData?.plant_weather[0]?.record_timestamp}</span>
												</div>
											</div>
										)}
										{/* Formdata has plant_weather (unit_hourly_load array)*/}
										{Array.isArray(formData) === false && formData?.unit_hourly_load !== undefined && formData?.unit_daily_energy === undefined && (
											<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-full mx-auto text-center">{"Unit Hourly Data"}</span>
												</div>
												{formData?.unit_hourly_load?.map((unit, index) => (<div key={index} className="flex bg-gray-300/50 p-1 gap-[1.5%] rounded-lg mb-5 mx-1 flex-col ">
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"$action"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.$action}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"active_load_mw"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.active_load_mw}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"bus_code"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.bus_code}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"cap_gain"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.cap_gain}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"connect_status"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.connect_status}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"fuel_code"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.fuel_code}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"reactive_load_mvar"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.reactive_load_mvar}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"record_id"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.record_id}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"record_timestamp"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.record_timestamp}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"unit_code"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_code}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"unit_name"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_name}
														</span>
													</div>
													<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
														<span className="w-[30%]">{"unit_temp"}</span>
														<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_temp}
														</span>
													</div>

												</div>))}
											</div>
										)}
										{/* FormData has unit Daily Energy && Show block_daily_energy array */}
										{Array.isArray(formData) === false && formData?.unit_hourly_load === undefined && formData?.unit_daily_energy !== undefined && formData?.block_daily_energy?.length > 0 && (<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
											<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
												<span className="w-full mx-auto text-center">{"Block Daily Energy"}</span>
											</div>
											{formData?.block_daily_energy?.map((unit, index) => (<div key={index} className="flex bg-gray-300/50 p-1 gap-[1.5%] rounded-lg mb-5 mx-1 flex-col ">
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"$action"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.$action}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"block_code"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.block_code}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"block_name"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.block_name}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"cc_common_aux"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.cc_common_aux}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"record_timestamp"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.record_timestamp}
													</span>
												</div>
											</div>))}
										</div>)}
										{/* FormData has unit Daily Energy && Show plant_daily_energy array */}
										{Array.isArray(formData) === false && formData?.unit_hourly_load === undefined && formData?.unit_daily_energy !== undefined && formData?.plant_daily_energy?.length > 0 && (<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
											<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
												<span className="w-full mx-auto text-center">{"Plant Daily Energy"}</span>
											</div>
											{formData?.plant_daily_energy?.map((unit, index) => (<div key={index} className="flex bg-gray-300/50 p-1 gap-[1.5%] rounded-lg mb-5 mx-1 flex-col ">
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"$action"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.$action}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"plant_code"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.plant_code}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"plant_common_aux"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.plant_common_aux}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"plant_name"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.plant_name}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"record_timestamp"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.record_timestamp}
													</span>
												</div>
											</div>))}
										</div>)}
										{/* FormData has unit Daily Energy && Show unit_daily_energy array */}
										{Array.isArray(formData) === false && formData?.unit_hourly_load === undefined && formData?.unit_daily_energy !== undefined && formData?.unit_daily_energy?.length > 0 && (<div className="flex flex-col mb-5 p-1 bg-gray-300/50 gap-[1.5%] rounded-lg  mx-1">
											<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
												<span className="w-full mx-auto text-center">{"Unit Daily Energy"}</span>
											</div>
											{formData?.unit_daily_energy?.map((unit, index) => (<div key={index} className="flex bg-gray-300/50 p-1 gap-[1.5%] rounded-lg mb-5 mx-1 flex-col ">
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"$action"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.$action}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"fired_hours"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.fired_hours}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"fired_starts"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.fired_starts}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"gross_energy"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.gross_energy}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"record_timestamp"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.record_timestamp}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"unit_aux"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_aux}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"unit_code"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_code}
													</span>
												</div>
												<div className="flex bg-gray-300/80 p-1 gap-[1.5%] rounded-lg mb-1 mx-1  ">
													<span className="w-[30%]">{"unit_name"}</span>
													<span className="w-[50%] border-l border-l-gray-700 pl-1">{unit?.unit_name}
													</span>
												</div>
											</div>))}
										</div>)}
									</div>)
									}
								</div>
							</div>
						</div >

					</div >
				)}
				{operation === 'editLoadCapacity' && (
					<div className="flex flex-col text-gray-600 w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit {auxValue === "imported" ? "Imported" : "Rented"} Load/Capacity </h1>
						<form className="flex flex-col items-start justify-center h-[40vh] w-full bg-gray-200 rounded-lg p-6">
							<div className="flex flex-col gap-[3%] w-full">
								<div className='flex w-full  pb-5  gap-[3%] justify-start '>
									<div className='flex justify-start flex-col items-start  w-[32.2%]'>
										<span className=" text-left pl-1">Organization Name</span>
										<div className="rounded-lg w-full bg-gray-300 cursor-not-allowed  h-[50px] flex items-center justify-start pl-4">
											{modalData?.org_name}
										</div>
									</div>
									<div className='flex justify-start flex-col items-start  w-[32.2%]'>
										<span className=" text-left pl-1">Date Time </span>
										<div className="rounded-lg w-full bg-gray-300 cursor-not-allowed  h-[50px] flex items-center justify-start pl-4">
											{handleAbFormDateTime(modalData?.record_timestamp)}
										</div>
									</div>
									{/* Organization Load*/}
									<div className='flex justify-start flex-col  w-[31.2%]'>
										<label
											className='pl-2 flex items-center'>
											{" "}
											{"Organization Load"}{" "}
										</label>
										<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
											<input
												required
												className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
												type={"text"}
												name=''
												inputMode='numeric'
												pattern='[0-9]+'
												value={value}
												placeholder='Organization Load...'
												onChange={(e) => {
													if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
														setValue(e.target.value);
													}
												}}
											/>
											<span className='bg-gray-200 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
												MW
											</span>
										</div>
									</div>

								</div>
								<div className='flex w-full  pb-5  gap-[3%] justify-start '>
									{/* Organization Capacity*/}
									<div className='flex justify-start flex-col  w-[31.2%]'>
										<label
											className='pl-2 flex items-center'>
											{" "}
											{"Organization Capacity"}{" "}
										</label>
										<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
											<input
												required
												className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
												type={"text"}
												name=''
												inputMode='numeric'
												pattern='[0-9]+'
												value={value2}
												placeholder='Organization Cap...'
												onChange={(e) => {
													if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
														setValue2(e.target.value);
													}
												}}
											/>
											<span className='bg-gray-200 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
												MW
											</span>
										</div>
									</div>
								</div>
								<div className='flex w-full  pb-5  items-center  gap-[3%] justify-start '>
								</div>
							</div >
							<div className='flex  justify-end gap-4 text-white mt-10 mr-5 w-full'>

								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form >

					</div >
				)}
				{operation === 'editEnergyEntry' && (
					<div className="flex flex-col text-gray-600 w-full ">
						<h1 className="text-2xl font-semibold text-center mb-2 w-full "> Edit {auxValue === "imported" ? "Imported" : "Rented"} Load/Capacity </h1>
						<form className="flex flex-col items-start justify-center h-[40vh] w-full bg-gray-200 rounded-lg p-6">
							<div className="flex flex-col gap-[3%] w-full">
								<div className='flex w-full  pb-5  gap-[3%] justify-start '>
									<div className='flex justify-start flex-col items-start  w-[31.5%]'>
										<span className=" text-left pl-1">Organization Name</span>
										<div className="rounded-lg w-full bg-gray-300 cursor-not-allowed  h-[50px] flex items-center justify-start pl-4">
											{modalData?.org_name}
										</div>
									</div>
									{auxValue === "rented" && (
										<div className='flex justify-start flex-col items-start  w-[31.5%]'>
											<span className=" text-left pl-1">Plant</span>
											<div className="rounded-lg w-full bg-gray-300 cursor-not-allowed  h-[50px] flex items-center justify-start pl-4">
												{modalData?.plant_name}
											</div>
										</div>
									)}
									<div className='flex justify-start flex-col items-start  w-[31.5%]'>
										<span className=" text-left pl-1">Date Time </span>
										<div className="rounded-lg w-full bg-gray-300 cursor-not-allowed  h-[50px] flex items-center justify-start pl-4">
											{handleAbFormDateTime(modalData?.record_timestamp)}
										</div>
									</div>


								</div>
								<div className='flex w-full  pb-5  items-center  gap-[3%] justify-start '>
									<div className="w-[31.5%]">
										<PrimeDropdown
											value={value2}
											onChange={(value) => setValue2(value)}
											title='Period'
											reference={value2Ref}
											redStar
											options={[
												{ label: "Daily", value: "Daily" },
												{ label: "Monthly", value: "Monthly" },
											]}
											placeholder='Select Period'
										/>
									</div>
									{/* Energy*/}
									<div className='flex justify-start flex-col  w-[31.5%]'>
										<label
											className='pl-2 flex items-center'>
											{" "}
											{auxValue === "imported" ? "Imported Energy" : "Rented Energy"}{" "}<span className="text-red-500 pl-1">*</span>
										</label>
										<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
											<input
												required
												className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
												type={"text"}
												name=''
												inputMode='numeric'
												pattern='[0-9]+'
												value={value}
												ref={valueRef}
												placeholder={auxValue === "imported" ? "Imported Energy..." : "Rented Energy..."}
												onChange={(e) => {
													if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
														setValue(e.target.value);
													}
												}}
											/>
											<span className='bg-gray-200 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
												{auxValue === "imported" ? "MW" : "KWH"}
											</span>
										</div>
									</div>
									{/* NamePlateCap */}
									{auxValue === "rented" && (
										<div className='flex justify-start flex-col  w-[31.5%]'>
											<label
												className='pl-2 flex items-center'>
												{" "}
												{"Nameplate Capacity"}{" "}<span className="text-red-500 pl-1">*</span>
											</label>
											<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
												<input
													required
													className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
													type={"text"}
													name=''
													ref={value3Ref}
													inputMode='numeric'
													pattern='[0-9]+'
													value={value3}
													placeholder='Nameplate Capacity...'
													onChange={(e) => {
														if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
															setValue3(e.target.value);
														}
													}}
												/>
												<span className='bg-gray-200 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
													MW
												</span>
											</div>
										</div>
									)}



								</div>
								{auxValue === "rented" && (
									<div className='flex w-full  pb-5  items-center  gap-[3%] justify-start '>
										{/* Fuel DD */}
										<div className="w-[31.5%]">
											<PrimeDropdown
												value={value4}
												onChange={(value) => setValue4(value)}
												title='Fuel Type'
												redStar
												reference={value4Ref}
												checker={true}
												endpoint={'api/v0/parent-fuel-dropdown'}
												placeholder='Select Fuel'
											/>
										</div>
										{/* Fuel Cons*/}
										<div className='flex justify-start flex-col  w-[31.5%]'>
											<label
												className='pl-2 flex items-center'>
												{" "}
												{"Fuel Consumption"}{" "}<span className="text-red-500 pl-1">*</span>
											</label>
											<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
												<input
													required
													className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
													type={"text"}
													name=''
													inputMode='numeric'
													pattern='[0-9]+'
													value={value5}
													ref={value5Ref}
													placeholder='Fuel Consumption...'
													onChange={(e) => {
														if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
															setValue5(e.target.value);
														}
													}}
												/>
												<span className='bg-gray-200 w-[50px] h-full  flex items-center justify-center py-3 px-5'>
													KL
												</span>
											</div>
										</div>
										{/* Number of Units*/}
										<div className='flex justify-start flex-col  w-[31.5%]'>
											<label
												className='pl-2 flex items-center'>
												{" "}
												{"Unit Count"}{" "}<span className="text-red-500 pl-1">*</span>
											</label>
											<div className='flex items-center justify-between overflow-hidden border-2 border-gray-100 rounded-lg   focus-within:ring-basic focus-within:ring duration-300 transition-all'>
												<input
													required
													className={`bg-transparent outline-none  py-3 px-5 flex-1 bg-white`}
													type={"text"}
													name=''
													ref={value6Ref}
													inputMode='numeric'
													pattern='[0-9]+'
													value={value6}
													placeholder='Unit Count...'
													onChange={(e) => {
														if (e.target.value === "" || /^[0-9.?]+$/.test(e.target.value)) {
															setValue6(e.target.value);
														}
													}}
												/>
											</div>
										</div>
									</div>
								)}
							</div >
							<div className='flex  justify-end gap-4 text-white mt-10 mr-5 w-full'>
								<button
									type="button"
									onClick={() => setShowSharedModal(false)}
									className='py-2 px-6 bg-red-500 rounded-md duration-300 hover:scale-[102%] active:scale-[90%] sm:text-xl md:text-2xl active:ring-4 ring-red-300'>
									Cancel
								</button>
								<SharedLoadingBtn loading={loading} handleClick={handleClick} />
							</div>
						</form >

					</div >
				)}
			</motion.div >
		</div >,
		document.querySelector(".modal-container_2")
	);
};
export default SharedModal;
